from github_scraper import GitHubScraper
from classifier_agents import ClassifierAgent
import argparse
import os

def main():
    github_scraper = GitHubScraper()
    classifier_agent = ClassifierAgent()
    issues = github_scraper.get_issues(per_page=3)
    for issue in issues:
        print("\n-------------------ISSUE CLASSIFICATION-------------------\n")
        issue_str = github_scraper.get_issue_str(issue)
        if issue_str == "":
            print("Bot, continuing...")
            continue
        response = classifier_agent.classify_data(issue_str)
        print("\n" + issue_str + "\n")
        print("\n-------------------CLASSIFICATION-------------------\n")
        print(response)
        print("\n-------------------ISSUE CLASSIFICATION END-------------------\n")
    pull_requests = github_scraper.get_pull_requests(per_page=3)
    for pull_request in pull_requests:
        print("\n-------------------PULL REQUEST CLASSIFICATION-------------------\n")
        pull_request_str = github_scraper.get_pull_request_str(pull_request)
        if pull_request_str == "":
            print("Bot, continuing...")
            continue
        response = classifier_agent.classify_data(pull_request_str)
        print("\n" + pull_request_str + "\n")
        print("\n-------------------CLASSIFICATION-------------------")
        print(response)
        print("\n-------------------PULL REQUEST CLASSIFICATION END-------------------\n")

def test():
    parser = argparse.ArgumentParser(description="Glue Work Bot")
    parser.add_argument('--config-file', required=True, help='Path to config file')
    parser.add_argument('--output-dir', required=False, default=None, help='Folder to save output files')
    args = parser.parse_args()
    output_dir = args.output_dir
    # config_path = args.config_file

    contributor_list_path = os.path.join(output_dir, "contributor_list_.md")
    glue_work_report_path = os.path.join(output_dir, "glue_work_report.md")

    os.makedirs(os.path.dirname(contributor_list_path), exist_ok=True)
    os.makedirs(os.path.dirname(glue_work_report_path), exist_ok=True)

    with open(contributor_list_path, "w") as f:
        f.write("This is a test glue work contributor list generated by the Glue Work Tracker Bot.")
    with open(glue_work_report_path, "w") as f:
        f.write("This is a test glue work report generated by the Glue Work Tracker Bot.")

if __name__ == "__main__":
    test()