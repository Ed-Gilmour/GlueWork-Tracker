body,Predicted
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The regular expression `/EXCLUDED_ARCHS.*arm64/` is a bit too broad and could lead to false positives. For example, it could match a commented-out line (e.g., `// EXCLUDED_ARCHS = arm64`) or a differently named variable that contains this substring.

To make the check more robust, I suggest making the regex more specific to anchor it to the start of the line and ensure it's matching the `EXCLUDED_ARCHS` key.

```ruby
        if line =~ /^\s*EXCLUDED_ARCHS\b/ && line.include?('arm64')
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This test duplicates the logic from `podhelper.rb` into a multi-line string. While this tests the intended logic, it's fragile from a maintenance perspective. If the implementation in `podhelper.rb` changes in the future (for instance, to fix a bug or improve the logic), this test will also need to be updated manually. Forgetting to do so could lead to the test passing while the actual code is broken, or the test becoming irrelevant as it tests outdated logic.

For better long-term maintainability, you might consider structuring the test to execute the code from `podhelper.rb` directly, perhaps by reading the file and wrapping the relevant function in a test harness. I understand this can be more complex to set up, so the current approach is a pragmatic trade-off. This is a suggestion for future consideration to improve test suite robustness.",N
So I think we should limit this to only Xcode 26. Looks like you should be able to get the Xcode version from the `XCODE_VERSION_MAJOR` build setting.,N
Use `raise` instead of `abort`,
"Also, you want the warning to be more actionable for the app developer. The app developer shouldn't be editing the podspec or xcconfig. They also aren't using pods directly. They think of things in terms in plugins. Maybe something like 

""The plugin xxx is excluding the arm64 architecture, which is a requirement for Xcode 26. Please file an issue with the plugin to support arm64.""",
Xcode 16 requires this too? I thought it was just Xcode 26 since Xcode 26 doesn't include the x86 simulator anymore?,
"Again, are we sure this is true for iOS 18?",
"This should be made into an integration test instead of a unit test. This test doesn't really verify your fix. Since you're using a `fakeProcessManager`, it doesn't actually run the `ruby` command or anything, it just returns the `stderr` from the `FakeCommand`.

See https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/integration.shard/swift_package_manager_test.dart as an example",
"From my understanding, the arch of the simulator is dependent on the processor of the mac. Xcode 16+ requires all simulators to be built for arm64 but Xcode 26 just stopped supporting rosetta",
"Per offline conversation:

Xcode 16 requires arm64 but supported x86 through rosetta. Xcode 26 no longer supports rosetta for simulators.

I think this comment is a little misleading, though, because it makes you think that you can't use `EXCLUDED_ARCHS` on Xcode 16 too. I would make the comment confined to Xcode 26. The historical context of Xcode 16 isn't super relevant. 

I'd just have the comment say something like ""Xcode 26 no longer allows you to build x86-only architecture for the simulator.""",
"Instead of checking for EXCLUDED_ARCHS in the podhelper, how about checking for it here?

If you look at the output of `buildSettings`, it returns all build settings from all targets with an output like this:

```
Build settings for action build and target Flutter:
    ACTION = build
    AD_HOC_CODE_SIGNING_ALLOWED = YES
    ...
    EXCLUDED_ARCHS = i386
    ...
Build settings for action build and target my_plugin:
    ACTION = build
    AD_HOC_CODE_SIGNING_ALLOWED = YES
    ...
    EXCLUDED_ARCHS = i386
    ...
```

You may be able to split it by `Build settings for action build and target` to be able to determine which target/plugin uses EXCLUDED_ARCHS. This way you can also easily check the Xcode version with `globals.xcode.currentVersion`",
So there could be other non-plugin targets. Perhaps could check the name against the list of plugins? You should be able to get the list of plugins with `findPlugins`.,
"Instead of exiting, let's print a warning. The ""universal"" version of Xcode 26 still allows you to use x86: https://github.com/flutter/flutter/issues/176188#issuecomment-3402191058",
Can you not split on `targetRegex` and then trim it? May be able to eliminate one level of regex,
"```suggestion
    final pluginsExcludingArmArch = <String>[];
```",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
@prash4931 you do not need to merge or rebase every time something is pushed to master.,
"> @prash4931 you do not need to merge or rebase every time something is pushed to master.

Noted",
@tirth-patel-nc  test cases already exist for this example at flutter/examples/api/test/widgets/routes/route_observer.0_test.dart. Do I need to add more test cases for this?,
"> @tirth-patel-nc test cases already exist for this example at flutter/examples/api/test/widgets/routes/route_observer.0_test.dart. Do I need to add more test cases for this?

yes, as victor mentioned, we’ll need a test for the new change you’ve made. you can prolly add a small overflow test in that same file.

```
expect(tester.takeException(), isNull);
```",
"Hi @victorsanni, @tirth-patel-nc  I've added the required tests. Please check
",
"This pull request executed golden file tests, but it has not been updated in a while (20+ days). Test results from Gold expire after as many days, so this pull request will need to be updated with a fresh commit in order to get results from Gold.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
@prash4931 Do you still have plans to finish this PR or should it be closed?,
"@prash4931 FYI you have an analyzer failure here, but we'd love to merge this if you have time to update it!",
"This failure was reported by the Linux analyzer. To fix it, you can format this file specifically.",
Here as well.,
"Hi Tirth, I've already formatted this file but not understanding this issue",
"hey, thanks for contributing. the issue is related to formatting, which is why the ci was complaining. the diff should look like this with the correct formatting.

<img width=""1512"" alt=""Screenshot 2025-06-26 at 10 17 51 PM"" src=""https://github.com/user-attachments/assets/f88495a4-0b28-410d-a5f6-47f5e70f5467"" />
",
"<img width=""1512"" alt=""Screenshot 2025-06-26 at 10 23 36 PM"" src=""https://github.com/user-attachments/assets/601d1eea-2dc8-4d0e-835a-ba2873a97855"" />

```console
dart format route_observer.0.dart
```

this should fix the formatting thingy. for me it applies this implicitly on save.",
"Ok Tirth. I will apply the fix and check again. Thanks!
",
Thanks for fixing it. ,
I don't think this is enough to prevent the changes in this PR from being regressed. Maybe add another test that has the example in a smaller screen size and verifies that there are no layout exceptions?,
"was on my mind but didn’t raise it, sorry about that",
"Nit:
```suggestion
    // Set the screen size to a smaller value (e.g., 300x600).
```",
"Nit: 
```suggestion
    // Rebuild the widget tree with the new window size.
```",
"Nit:
```suggestion
    // Build the RouteObserver example widget.
```",
"```suggestion
```
Not sure this comment is needed.",
"Nit:
```suggestion
    // Verify there are no layout exceptions (like RenderFlex overflow).
```",
"This is pumping a new `MaterialApp`. Example tests should test the example itself - in this case, by calling 

```dart
await tester.pumpWidget(const example.RouteObserverApp());
``` 

as in the other test.",
Is it not possible to test on `example.RouteObserverApp()`?,
"This doesn't rebuild the widget tree with the new window size, it just tells the test framework to restore the window to its original size when the test is done.",
"I got it working with this test:

```dart

  testWidgets('RouteObserver example renders without overflow on small screens', (
    WidgetTester tester,
  ) async {
    // Set the screen size to a smaller value.
    tester.binding.window.physicalSizeTestValue = const Size(200, 200);
    tester.binding.window.devicePixelRatioTestValue = 1.0;
    addTearDown(tester.binding.window.clearPhysicalSizeTestValue);
    addTearDown(tester.binding.window.clearDevicePixelRatioTestValue);

    // Build the RouteObserver example widget.
    await tester.pumpWidget(const example.RouteObserverApp());
    await tester.pumpAndSettle();

    // Verify there are no layout exceptions.
    expect(tester.takeException(), isNull);
  });

```",
"Hi @prash4931, this PR is ready to go once this test is replaced with the test in https://github.com/flutter/flutter/pull/170980/files#r2258335551.",
Is this import needed?,
And this import as well,
"@ksokolovskyi Thanks for the wonderful contribution! I left a nitpick, but once that's addressed I think this is good to go!",
/gemini,
"Hi @ksokolovskyi! It looks like you tried to invoke me with `/gemini`. Please note that `/gemini` by itself is not a recognized command. If you'd like me to perform a code review, please use `/gemini review`. If you'd like a summary of the pull request, please use `/gemini summary`. You can also type `/gemini help` to see a full list of available commands.",
/gemini review,
"@loic-sharma, thanks a lot for the review. What do you think about the latest Gemini suggestion?",
"I thought this PR was related to https://github.com/flutter/flutter/pull/176507, but looks like that one is on a different class and done for a different reason. Just commenting so I don't lose them again.",
@loic-sharma thanks a lot for your review!,
"@ksokolovskyi my pleasure, thanks for the excellent contribution! :)",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There's a small copy-paste error here. The documentation for `bottomEnd` should refer to `AlignmentDirectional.bottomEnd` instead of `AlignmentDirectional.bottomStart`.

```dart
  /// * [AlignmentDirectional.bottomEnd], which is the same thing.
```",
"For a newbie, it might be unclear what ""start"" or ""end"" means. This was a little clearer before because `AlignmentDirectional`'s [docs](https://api.flutter.dev/flutter/painting/AlignmentDirectional-class.html) hinted this was related to text direction. 

I think we should add a hint to all these new directional members. For ""start"" side members, something like:

```dart
  /// The top corner on the ""start"" side.
  ///
  /// This can be used to indicate an offset from the left in [TextDirection.ltr]
  /// text and an offset from the right in [TextDirection.rtl] text without having
  /// to be aware of the current text direction.
  ///
  /// See also:
  ///
  /// * [AlignmentDirectional.topStart], which is the same thing.
```

And for ""end"" side members, something like:

```dart
  /// The top corner on the ""end"" side.
  ///
  /// This can be used to indicate an offset from the right in [TextDirection.ltr]
  /// text and an offset from the left in [TextDirection.rtl] text without having
  /// to be aware of the current text direction.
  ///
  /// See also:
  ///
  /// * [AlignmentDirectional.topEnd], which is the same thing.
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

To improve maintainability and reduce documentation duplication, consider using a `{@macro}` for the repeated explanation of directional alignment.

You could define a template, for example at the top of the file:
```dart
/// {@template flutter.painting.alignment.directional}
/// This can be used to indicate an offset from the left in [TextDirection.ltr]
/// text and an offset from the right in [TextDirection.rtl] text without having
/// to be aware of the current text direction.
/// {@endtemplate}
```

And then use `/// {@macro flutter.painting.alignment.directional}` for this and the other 5 new static members. This would replace the paragraph explaining the behavior with LTR/RTL text directions.

```dart
  /// {@macro flutter.painting.alignment.directional}
```",
"@ksokolovskyi This Gemini suggestion sounds good to me, but please use separate macros for start/end though.",
@loic-sharma could you review this updated PR ?,
"@loic-peron-inetum-public Thanks for the contribution! This is looking good. I left some comments, but otherwise this is looking good!

cc @chunhtai as I'm less familiar with the `//third_party/accessibility/ax/` codebase.",
"agree with @loic-sharma , we should not use the htmlId since the data doesn't come from a web dom but flutter app",
Rebased on master and replaced kHtmlId with kIdentifier.,
Hi @loic-peron-inetum-public can you rebase this pr again to see if it passes ci,
Rebased on master.,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The function name `SetHtmlIdFromFlutterUpdate` is specific to web, but this identifier is used more broadly for native accessibility identifiers (e.g., `AutomationId` on Windows). To improve clarity and maintainability across platforms, consider renaming it to something more generic like `SetIdentifierFromFlutterUpdate`.

This would also require updating the declaration in `accessibility_bridge.h` and the call site in `ConvertFlutterUpdate`.

```suggestion
void AccessibilityBridge::SetIdentifierFromFlutterUpdate(
    ui::AXNodeData& node_data,
    const SemanticsNode& node) {
  node_data.AddStringAttribute(ax::mojom::StringAttribute::kHtmlId,
                               node.identifier);
}
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This file contains significant boilerplate for initializing `FlutterSemanticsNode2` instances across multiple tests. To improve maintainability and reduce code duplication, consider creating a helper function similar to `CreateSemanticsNode` in `accessibility_bridge_unittests.cc`. This would encapsulate the default initialization and make the tests cleaner and easier to read.",
"Looks like UI Automator should have a space: https://developer.android.com/training/testing/other-components/ui-automator

```suggestion
  /// native accessibility, like UI Automator, XCUITest, or Appium.
```",
"This could cause the screen reader to announce the identifier to the user, right? Per this [comment](https://github.com/flutter/flutter/pull/175405/files#diff-a52c655cab63cbe1d9bfb9a43cef19c510c16d8c1aba5336b02b0a1685a7caa8R1697), that doesn't seem desirable. Should we remove this?",
"Just curious, how did you pick this name? Did you consider something like `kAuthorUniqueId`? This would better match `PlatformNodeDelegateBase::GetAuthorUniqueId`.",
"This is a reasonable suggestion, but let's skip it for this PR.",
"No, this alone will not make the identifier exposed to the reader, only propagated from the flutter engine to the desktop accessibility framework. It then needs to be exposed to the platform-specific API, for example https://github.com/flutter/flutter/pull/175406
In all cases, many attributes exposed to the screen reader are silently ignored, only the main ones are announced to the user.",
"I went to the original source for the desktop accessibility framework in Chromium, where the technical id for a DOM element is `kHtmlId`. In an old version https://github.com/flutter/engine/pull/53729 with Windows UI Automation, I used  `kAuthorUniqueId`. When I went the alternate route of `IAccessibleEx`, I took the name from the Chromium sources.

Would you prefer `kAuthorUniqueId`, or `kIdentifier` in line with the previous Gemini proposal and the global Flutter naming ?",
"We since divert from chromium code base, we should pick a name that best suit our use case.

htmlId doesn't make sense in the context. I vote for kIdentifier. ",
Done,
Done,
Thanks for confirming!,
"> [!WARNING]
> Gemini encountered an error creating the review. You can try again by commenting `/gemini review`.",
"I need your help @loic-sharma, I have a leak test failing and I believe it is because of `assert()` which checks if tween is valid (has begin and end). I don't know how to solve that. I can move the assert to the constructor, but then it can't be `const`, or I can just remove the assert (but then if someone forgets begin or end will get runtime issues). What do you think? Shall I remove `const` or is there a simple good way to solve this problem?",
"@bernaferrari I would go ahead and make the widget non-`const` for now.

It looks like leaking objects in exceptional situations (like a test for error conditions) is a known issue: https://github.com/flutter/flutter/issues/157470. When we fix this, we can make this widget `const` :)",
"Well, I finished it, but I guess I took too long :( This completely breaks my PR: https://github.com/flutter/flutter/pull/174605

We can still merge it, but I think it will only be useful for samples. The biggest reason for this PR (progress indicator) is now even more complex with custom controller. I could do something like, if no custom controller is provided, use `RepeatingTweenAnimationBuilder` else do the standard behavior, but it will be duplicated code, so I'm not sure how to progress.

We can:
- When not using custom controller, use `RepeatingTweenAnimationBuilder` (but might have duplicated rendering logic)
- I guess allow custom `AnimationController` inside `RepeatingTweenAnimationBuilder`
- Merge but only use on examples, not on ProgressIndicator
- Don't merge.

Any thoughts? For now, I'm going for option 1, it is a bit more code but should work. I'll fix whatever is causing the golden later (interesting there was no golden issue before).",
"Golden file changes have been found for this pull request. Click [here to view and triage](https://flutter-gold.skia.org/cl/github/174014) (e.g. because this is an intentional change).

If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review.



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #174014 at sha a096c638e0a537686ed972935e479d5d8ede9d79_

",
"@bernaferrari Hey there, sorry for the long response time on my end. I think we should still merge this and use it only for examples:

1. Let's make `RepeatingTweenAnimationBuilder`'s builder accept a `T` instead of `Animation<T>`. See [this comment](https://github.com/flutter/flutter/pull/174014#discussion_r2377296222) for details.
2. Use `RepeatingTweenAnimationBuilder` conservatively where it is clearly the right choice. I wouldn't update the progress indicators if that requires multiple rendering

This is still a good first step! We can continue to make `RepeatingTweenAnimationBuilder` more powerful (by expanding it to the `Animation<T>` pattern) later to use this in more areas :)",
Hi @bernaferrari ! Are you able to address the comments above so we can work together to get this landed?,
"Yes, yes. I'll update it today",
"Ok. Sorry for the loooooong wait. I think I commited everything we talked about. The examples surface got (drastically) reduced and I'm using ""double"" so it matches the TweenBuilder. I am a bit 🤨 because I wish it could be more useful, but I don't know how. With `FadeTransition` (etc) it gets super nasty, and `ProgressIndicator` got their own implementation. So it feels we are still looking for a ""better"" and ""clean"" solution for them.",
This is looking really good. That sample app is a work of art. Excellent work! :),
Can we use [`transform`](https://api.flutter.dev/flutter/animation/Tween/transform.html) instead of `evaluate` here to remove the `AlwaysStoppedAnimation`?,
Nit: I'd consider dropping this line - calling out something that's not present might confuse users.,
Could you move the Ownership section up above the code samples?,
"This content mirrors but is slightly different from the ""Ownership of the Tween"" content on TweenAnimationBuilder. I'd consider making a template out of the original content and just use the template here.

https://github.com/flutter/flutter/blob/6cbd98adc517ca7a20c724c4f0c5a5a385b95f74/packages/flutter/lib/src/widgets/tween_animation_builder.dart#L58C1-L67C34",
Oof.. This is not as nice as I had hoped. Maybe this would be better as a separate `RepeatedTweenAnimationBuilder` widget?,
"the issue of making a template (now) where it is a separate component is that I can't repeat ""The [TweenAnimationBuilder] takes full ownership"" unless it accepts variable so might make sense to repeat now :( or  just omit or duplicate.",
`TweenAnimationBuilder.builder` has type `ValueWidgetBuilder<T>` - should we use the same type here to be consistent?,
"This is tricky. ValueWidgetBuilder<T> takes the actual value T, while  RepeatingTweenAnimationBuilder is currently taking Animation<T>.
The reason is, many examples require animation, so it doesn't make sense for us to do `animation.value` and then create a new FixedAnimation(value) or something like that, I thought it made more sense to just use animation directly instead of animation.value, but it makes it different than TweenAnimationBuilder, so it is tricky.

I wish Repeating had value instead of animation, but then it will make the code for example worse than right now. Any thoughts?

Examples like this would suffer:
<img width=""598"" height=""332"" alt=""image"" src=""https://github.com/user-attachments/assets/c66a788f-dc94-4e46-af4a-26484b65d405"" />
",
"Should we also check if the tween's runtime type changed? For example, I might switch to a different `Tween` implementation that has a different `lerp` function.",
"Please add a period to the end of all comments :)

```suggestion
    // Start the animation if not paused and begin != end.
```",
"Yes!! I completely forgot about runtime type, thanks!",
"TLDR: We should use `ValueWidgetBuilder<T>` here as well.

Whether the builder accepts a `T` or a `Animation<T>` has implications on how many times the builder should be called:

```dart
FooAnimationBuilder(
  tween: Tween<double>(begin: 0, end: 1),
  builder: (context, double sizeFactor, child) {
    // This builder is called each time sizeFactor changes.
    // The subtree is rebuilt on each tick.
    return ...;
  },
);

FooAnimationBuilder(
  tween: Tween<double>(begin: 0, end: 1),
  builder: (context, Animation<double> sizeFactorAnimation, child) {
    // This builder should be called ONCE. You or some child widget needs an
    // AnimatedBuilder to trigger a callback each time sizeFactorAnimation
    // changes. This lets you minimize the subtree that is rebuilt each
    // time the animation ticks.
    return ...;
  },
);
```

Since `TweenAnimationBuilder` uses the former pattern (`T`), `RepeatingTweenAnimationBuilder` should use the same pattern - it'd be confusing otherwise. I do think the latter pattern (`Animation<T>`) is something we should consider, however let's punt that until after this PR as I'd like to come up with a new naming convention that makes the distinction clear. 

---

Counterintuitively, the `AlwaysStoppedAnimation` thing is a good thing. It's a code smell that indicates we're using some API incorrectly:

* **Option 1**: Switch to a child widget that doesn't accept an `Animation<T>`. For the `SizeTransition` example, we should consider switching to `ClipRect` + `Align` instead. For `RotationTransition`, we should consider switching to a `Transform` instead.
* **Option 2**: Consider whether the child widget actually needs to accept an `Animation<T>`. If the child widget rebuilds itself on each tick, it should might as well just accept a `T`.
* **Option 3**: Don't use `RepeatingTweenAnimationBuilder`. Go back to an explicit animation instead. Examples for this category: `AnimatedIcon` animations, `FadeTransition` animations (this has important optimizations over using `Opacity` directly), etc.

Let me know if you have any feedback or questions!",
"This looks like a typo

```suggestion
// END GENERATED TOKEN PROPERTIES - ProgressIndicator

```",
Could you expand on why the `ClipRect` here? (I suspect this is a typo),
"arggggh I pushed but I'm still fixing some things. I'm not very happy with the overall PR because with using everything we discussed, it feels `RepeatingTweenAnimationBuilder` is not useful for transitions, and therefore there are only very limited amount of places it is useful. I'll revert a lot of the examples soon, since they don't need it anymore.",
"This looks like a stale comment? :)

```suggestion
              paused: determinate,
```",
"Can this be `strokeAlign` too?

```suggestion
                          strokeAlign: strokeAlign,
```",
"Here as well?

```suggestion
                          strokeAlign: strokeAlign,
```",
"Ahh ok, no worries. Feel free to tag me in a comment when you're ready for another pass :)",
"These arguments aren't nullable, so I don't think this comment is necessary. Let me know if I'm missing something though!

```suggestion
```",
"Nit:

```suggestion
    // Update the duration if it changed.
```",
"```suggestion
    // Update the animation if the curve or the tween changed.
```",
Good! Fixed,
"Could you expand on this logic? Does this result in a measurable performance improvement?

I would consider removing this. Changing the tree's depth means that the widget returned by `widget.builder` can lose state unless the subtree has a `GlobalKey`. This behavior wouldn't be immediately obvious to newbies, I expect this might become a usability hiccup.",
"Hm a slight drawback here is that this will always goes forward, even if we paused while the animation was running in reverse. Unfortunately, this seems to be a limitation of the `AnimationController` API (we might need to add a `startReversed` parameter to `AnimationController.repeat`?). I think that's OK for now, we can always fix this later.",
"Probably no measurable performance improvement. I can remove. It came because Progress Indicator does something similar. But I agree, it is probably a super tiny optimization we don't need.",
"The AnimationController API is very VERY confusing, and I guess part of that went for our new Tween. Right now, ""reverse"" means: when it reaches the end it ""reverses"" until zero. Like 0->1->0, instead of 0->1, 0->1. It doesn't mean, like, ""please revert the movement in the opposite direction""

At some point I considered cleaning/improving the AnimationController, but it would be breaking. Not sure if we should just (eventually) make InfiniteAnimationController or something like that, which Compose does (and is much cleaner).",
Nit: could you do a pass on this file's comment and add periods at the end of all comments?,
"Do you think we can loosen the limitation of `tween` and instead allow `Animatable` here? Reasoning:
* I expect that this class is mostly used to play looping animations. Currently a smooth loop needs either `reverse: true` or special periodic properties (such as angles). This class can not be used for, for example, a TranslateY that increases ease-in and then decreases ease-in, since the animation is asymmetrical and has the same beginning and end.
* By roughly examining the code I think the only place that use the special properties of `Tween` are using its `begin` and `end` in `shouldChange`.

We can delegate `reverse` to `Animatable`, and delegate the comparison of `begin` and `end` to `Tween`.",
"Could you review my last commit? (or I guess re-review everything) https://github.com/flutter/flutter/pull/174014/commits/86e67f31a00ee0f9470c70ac8dfa2a7e692f6874

I still need to test a bit more locally + see if tests pass. But can give you a clear picture if that's what you want or not.",
"> I see a lot of TextPainters that are created, laid out, and then quickly disposed. For performance reasons, I wonder if there are any opportunities to cache and reuse any of these TextPainters? They can cheaply paint multiple times if their parameters haven't changed and a relayout isn't needed. If this significantly increases code complexity though, then it's probably not worth it until we have a reason to think performance is a bottleneck.

> Also another general comment, it looks like there is a lot of drawing code that is almost the same repeated in a couple of different places for various types/parts of slider. I wonder if there's any opportunity to reuse some generic code? This is not the fault of this PR, it was like that beforehand, but this is just a heads up in case you see any opportunities where it makes sense to DRY things up.

Thank you for reviewing this, Justin! I’ll look into these suggestions next week and consider any optimizations.",
"Golden file changes have been found for this pull request. Click [here to view and triage](https://flutter-gold.skia.org/cl/github/173324) (e.g. because this is an intentional change).

If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review.



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha c55e20feba3cf3b2c030e6778b72bbf92dcd3ac8_

",
"Hi @justinmc, after looking at this fix again, I also think implementing cache for TextPainters may increase code complexity with minimal benefit and may result in higher maintenance costs. However, if you think this is necessary, please let me know. 

Instead, I did improve the fix a bit with a cleanup, what I did was to do code deduplication text processing(`maxLines` truncation and ellipsis creation) inside `***PathPainter.paint() methods`: Extract common multiline text processing inside paint methods of `_DropSliderValueIndicatorPathPainter` and `_RoundedRectSliderValueIndicatorPathPainter` into a reusable class/method. 

- Before:
```dart
    TextPainter finalLabelPainter = labelPainter;
    if (multilineConfig.enabled && multilineConfig.maxLines != null) {
      finalLabelPainter = TextPainter(
        text: labelPainter.text,
        textDirection: labelPainter.textDirection,
        textScaleFactor: textScaleFactor,
        maxLines: multilineConfig.maxLines,
      )..layout();

      // If lines were truncated, add ellipsis manually.
      if (finalLabelPainter.didExceedMaxLines) {
        finalLabelPainter.dispose(); // Dispose the intermediate painter
        finalLabelPainter = _createTextPainterWithEllipsis(
          originalPainter: labelPainter,
          originalText: labelText,
          maxLines: multilineConfig.maxLines!,
          textScaleFactor: textScaleFactor,
        );
      }
    }
...
if (finalLabelPainter != labelPainter) {
      finalLabelPainter.dispose();
    }
```
- After: Create a reusable class `_ValueIndicatorTextProcessor` for using inside `***PathPainter.paint()`:
<details>
<summary>_ValueIndicatorTextProcessor</summary>

```dart
/// Utility class for processing multiline text in value indicators.
class _ValueIndicatorTextProcessor {
  const _ValueIndicatorTextProcessor._();

  /// Processes multiline text for value indicators, handling maxLines
  /// truncation and ellipsis.
  ///
  /// Returns the appropriate TextPainter based on the multiline configuration.
  /// The caller is responsible for disposing the returned TextPainter
  /// if it differs from the original.
  static TextPainter processMultilineText({
    required TextPainter originalPainter,
    required ValueIndicatorMultilineConfig multilineConfig,
    required double textScaleFactor,
  }) {
    final String labelText = originalPainter.text?.toPlainText() ?? '';

    if (!multilineConfig.enabled || multilineConfig.maxLines == null) {
      return originalPainter;
    }

    final TextPainter truncatedPainter = TextPainter(
      text: originalPainter.text,
      textDirection: originalPainter.textDirection,
      textScaleFactor: textScaleFactor,
      maxLines: multilineConfig.maxLines,
    )..layout();

    if (!truncatedPainter.didExceedMaxLines) {
      return truncatedPainter;
    }

    truncatedPainter.dispose();
    return _createTextPainterWithEllipsis(
      originalPainter: originalPainter,
      originalText: labelText,
      maxLines: multilineConfig.maxLines!,
      textScaleFactor: textScaleFactor,
    );
  }

  /// Safely disposes a TextPainter if it was created by processMultilineText.
  /// Does nothing if the painter is the same as the original.
  static void disposeIfCreated(TextPainter painter, TextPainter original) {
    if (painter != original) {
      painter.dispose();
    }
  }
}
```
</details>


```dart
    final TextPainter finalLabelPainter = _ValueIndicatorTextProcessor.processMultilineText(
      originalPainter: labelPainter,
      multilineConfig: multilineConfig,
      textScaleFactor: textScaleFactor,
    );
...
_ValueIndicatorTextProcessor.disposeIfCreated(finalLabelPainter, labelPainter);
```

 Benefits we gained:
  - Reduces duplicated code in paint methods for those PathPainter classes
  - Centralized multiline text handling logic to improve maintainability and facilitate testing",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 83a6be1e594bbeda712c758289f91c025001fc77_

",
"Hi @justinmc, all checks have passed. Could you please take a look again?",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 8a44295b0a889f19a5a1ce60a6970d7362b42f98_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 7967a2d2ef7108ad73b7c47eea57a4831d0229ec_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 04dd854159bd4cddcf315677df5cbddbdd0162dd_

",
"> ok I initially thought the additional text painter was for figuring out the number of lines visible if you render a document in a fixed size box. But it looks like the new API takes `maxLines` so I'm a bit confused as to why the additional text painter is needed? Can't we tell the owner of the text painter about `maxLines` and let it set max lines on the `TextPainter`?

Thanks for pointing this out! I had to look back at the case `actualLines <= maxLines` in `_ValueIndicatorTextProcessor.processMultilineText`: it's indeed unnecessary, we can just return the original text painter. 

-----

@justinmc @LongCatIsLooong I have made a new [commit](https://github.com/flutter/flutter/pull/173324/commits/eacec9b824f4f1be6a9d4b524f1c32081783e274) that incorporates all of your ideas. Please let me know how it is!",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha eacec9b824f4f1be6a9d4b524f1c32081783e274_

",
"> > ok I initially thought the additional text painter was for figuring out the number of lines visible if you render a document in a fixed size box. But it looks like the new API takes `maxLines` so I'm a bit confused as to why the additional text painter is needed? Can't we tell the owner of the text painter about `maxLines` and let it set max lines on the `TextPainter`?
> 
> Thanks for pointing this out! I had to look back at the case `actualLines <= maxLines` in `_ValueIndicatorTextProcessor.processMultilineText`: it's indeed unnecessary, we can just return the original text painter.
> 
> @justinmc @LongCatIsLooong I have made a new [commit](https://github.com/flutter/flutter/pull/173324/commits/eacec9b824f4f1be6a9d4b524f1c32081783e274) that incorporates all of your ideas. Please let me know how it is!

I think my question is, why do we have to create a new TextPainter? Can we tell the creator of the TextPainter to use `maxLine`?",
"> why do we have to create a new TextPainter?

@LongCatIsLooong: Could you please point out which part in the fix (LOC)? Before I pushed the new [commit](https://github.com/flutter/flutter/pull/173324/commits/eacec9b824f4f1be6a9d4b524f1c32081783e274), I created a redundant painter at [here](https://github.com/flutter/flutter/pull/173324/commits/04dd854159bd4cddcf315677df5cbddbdd0162dd#diff-72d0f76e314d68c31828a3ccd11383ae73b2c528f0ab95725f6d6a8082497811R879-R884), then turned out it was unnecessary, then I removed it in the last [commit](https://github.com/flutter/flutter/pull/173324/commits/eacec9b824f4f1be6a9d4b524f1c32081783e274). If you refer to the painter in `_createTextPainterWithEllipsis`, I would explain it's due to `TextPainter.ellipsis` built-in API is not working as desired in this case (I don't know the reason), that's why I had to create a painter with ellipsis manually. 

Additionally, when I attempted to use these setters (ellipsis, maxLines), they didn't work. They seem to work in TextPainter's constructor only and can't be modified after the object is created and laid out.

```dart
_textPainter.ellipsis = '...';
_textPainter.maxLines = maxLines;
_textPainter..layout();
```",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 56d103100bdea062f98161a63815f395aec0b14d_

",
"> I would explain it's due to TextPainter.ellipsis built-in API is not working as desired in this case (I don't know the reason)

I think we should fix that instead of working around it. Is there a tracking issue? I'm not aware of ellipsis bugs other than the one that happens when maxLines set to null (it shows only one line in that case).",
"> I think we should fix that instead of working around it. Is there a tracking issue? I'm not aware of ellipsis bugs other than the one that happens when maxLines set to null (it shows only one line in that case).

@LongCatIsLooong I think it's https://github.com/flutter/flutter/issues/50168 (and also relates to https://github.com/flutter/flutter/issues/167466, but I think we can dedup 167466 into 50168 as 50168 is an underlying issue, correct?).

I also made another simple reproduction here to illustrate Slider scenario in this PR: it basically renders a text with TextPainter inside a OverlayPortal:

<details>
<summary>Sample code</summary>

```dart
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: TextPainterSample(),
    );
  }
}

class TextPainterSample extends StatefulWidget {
  const TextPainterSample({super.key});

  @override
  _TextPainterSampleState createState() => _TextPainterSampleState();
}

class _TextPainterSampleState extends State<TextPainterSample> {
  final OverlayPortalController _overlayController = OverlayPortalController();

  final String testText = '''Line 1: This is a long line of text
Line 2: Another long line of text
Line 3: Yet another long line
Line 4: More text content here
Line 5: Additional text content
Line 6: Even more text here
Line 7: Continuing with more text
Line 8: Still adding more lines
Line 9: Almost at the end
Line 10: Final line of text''';
  int? maxLines;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('TextPainter ellipsis sample')),
      body: Center(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: () {
                setState(() {
                  maxLines = null;
                });
              },
              child: Text('maxLines null'),
            ),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  maxLines = 5;
                });
              },
              child: Text('maxLines = 5'),
            ),
            Text('maxLines: $maxLines'),
            Divider(
              height: 20,
              color: Colors.amber,
              thickness: 8,
            ),
            Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                CustomPaint(
                  size: Size(200, 100),
                  painter:
                      EllipsisTextPainter(text: testText, maxLines: maxLines),
                ),
                OverlayPortal(
                  controller: _overlayController,
                  overlayChildBuilder: (context) {
                    return Positioned(
                      top: 180,
                      left: 260,
                      child: Material(
                        elevation: 8,
                        borderRadius: BorderRadius.circular(8),
                        child: Container(
                          width: 300,
                          padding: EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: CustomPaint(
                            size: Size(200, 80),
                            painter: EllipsisTextPainter(
                                text: testText, maxLines: maxLines),
                          ),
                        ),
                      ),
                    );
                  },
                  child: ElevatedButton(
                    onPressed: () {
                      _overlayController.toggle();
                    },
                    child: Text('Toggle Overlay'),
                  ),
                ),
                ColoredBox(
                  color: Colors.red,
                  child: SizedBox(
                    width: 200,
                    height: 100,
                    child: Text(
                      testText,
                      maxLines: maxLines,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class EllipsisTextPainter extends CustomPainter {
  final String text;
  final int? maxLines;
  EllipsisTextPainter({required this.text, this.maxLines});

  @override
  void paint(Canvas canvas, Size size) {
    final textPainter = TextPainter(
      text: TextSpan(
        text: text,
        style: TextStyle(
          color: Colors.black,
          fontSize: 14,
        ),
      ),
      textDirection: TextDirection.ltr,
      maxLines: maxLines,
      ellipsis: '...',
    );

    textPainter.layout(maxWidth: size.width);
    textPainter.paint(canvas, Offset.zero);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

```
</details>

<details>
<summary>Demo screenshot/video</summary>

https://github.com/user-attachments/assets/a88896d1-1503-4c2f-979b-500c5ed25f10

</details>

Let me know if this case is not similar to issues mentioned and needs to be tracked separately, then I can file an issue for tracking.",
"https://github.com/flutter/flutter/issues/50168 doesn't look difficult to fix (but it may break some existing tests). I think it would be better to add a TODO instead of working around the bug (if the workaround works well then it should probably be moved to the TextPainter implementation, if it doesn't then we shouldn't use that).",
"> #50168 doesn't look difficult to fix (but it may break some existing tests). I think it would be better to add a TODO instead of working around the bug (if the workaround works well then it should probably be moved to the TextPainter implementation, if it doesn't then we shouldn't use that).

I added a TODO and also filed https://github.com/flutter/flutter/issues/175251 for this.",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha ef4643e2331ffbb36cc0518491adfd90e405d1e1_

",
"> I'd recommend that we remove the workaround (and pretend the bug doesn't exist in this implementation) if possible. The reason for that is that I think it's pretty difficult to get the ellipsis implementation right here (in slider_parts.dart) but it should be an easy change in skparagraph (see the comments above).

It's fine to remove the workaround, but there is another aspect that I'm unsure if it can achieve the same result (text is ellipsized by height) once it's solved in `skparagraph` as said. Per `TextPainter.ellipsis` was documented here; it seems to be constrained to width only:

https://github.com/flutter/flutter/blob/844edbcd91ba0aa7b1b2d8d809689c69ebeb7222/packages/flutter/lib/src/painting/text_painter.dart#L934

If it is definitely expected, I can proceed as suggested. Then I will update as follows:
1. Remove `_createTextPainterWithEllipsis`
2. Simply return a TextPainter with `maxLines` instead",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha dce56a02f6f22461b2ac68435735b0acef345190_

",
@LongCatIsLooong (a gentle ping): Could you please take a look at this?,
"Sorry for the delay, but I still don't think we should add the workaround for the SkParagraph issue. I think it would make the actual fix a breaking change to land in SkParagraph, since it relies on SkParagraph doing the wrong thing.",
@LongCatIsLooong Thanks for your response. I removed the workaround and used TextPainter's built-in API in the last commit. And also closed https://github.com/flutter/flutter/issues/175251 as it's unnecessary to do anymore. Let me know if there are any suggestions for this PR.,
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173324).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173324 at sha 13a4b07bbd0cf9a04a8a62b53ce1c1afc1149f87_

",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

This helper function has a potential crash. It's called when `didExceedMaxLines` is true, which can happen if a single line of text wraps to multiple lines without containing any newline characters. In that scenario, `originalText.split('\n')` will produce a list with fewer elements than `maxLines`, causing a `RangeError` when accessing `lines[maxLines - 1]`. Since adding an ellipsis correctly for wrapped text is complex and not part of the original issue's scope, I recommend removing this helper and the associated logic for adding an ellipsis from both `_DropSliderValueIndicatorPathPainter` and `_RoundedRectSliderValueIndicatorPathPainter`. The default behavior of `TextPainter` (truncating without an ellipsis) is safer and sufficient to fix the layout issue.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This logic incorrectly draws the stroke for both the old `trianglePath` and the new `path`. When `hasMultipleLines` is true, this will draw the stroke for the old shape on top of the new one. When `hasMultipleLines` is false, `path` is a copy of `trianglePath`, so the stroke is drawn twice. You should only draw the stroke for `path`.

```
      canvas.drawPath(path, strokePaint);
```",
"Good catch for the boundary-value test. However, this case might not be happening as it already has a check `finalLabelPainter.didExceedMaxLines` outside (given that `didExceedMaxLines` works as desired).  I'm missing tests for this case, I added some for this case.",
Nit: Would it be more clear to name this something like `hasNewline` since it doesn't depend on layout?,
Same question about naming here.,
I think you have an extra empty line here.,
Same comment about naming here.,
"Nit: capitalize ""Without""",
Is this final pumpAndSettle necessary? Or you're just checking that nothing goes wrong in the frames after the gesture is released? Here and below.,
"Good catch here. My first thought was: it may ensure all frame updates are completed after the gesture ends. Turned out it's unnecessary. After I removed them, tests are still passed! Thanks!",
Nit: Make this abstract so it's clear it's never instantiated?,
I think this should be a private static method on _ValueIndicatorTextProcessor.,
Move this closer to where it's used so that it doesn't get created in the cases where it's never used.,
I think this would be better off in-line. This method requires too much context from its caller to make sense on its own in my opinion.,
@LongCatIsLooong Do you know if we have any precedents for creating and throwing away TextPainters like this? Just want to double check.,
"Nit: Just an idea to split up this big `if/else`. You could create two new private methods, one for the case that hasNewline is true and one for false, that create and return the Path.",
Period at the end of this comment.,
"I see some of this spilling out hapening in the goldens:

<img width=""921"" height=""876"" alt=""Image"" src=""https://github.com/user-attachments/assets/0cd0f8ef-6a03-4c61-8ebd-ac2692f90938"" />

Should that be adjusted so the text fits fully inside?",
Thanks for including Diagnosticable 👍 ,
"Nit: Do you know of any cases where someone would actually want the original behavior? Maybe we could simplify things by not supporting the original behavior, unless someone opens an issue asking for it?

I'm assuming that the default behavior looks broken in most cases and so most people don't want it, but I could be wrong.",
"Oops, you're correct. My bad, I forgot to add `ValueIndicatorMultilineConfig.cornerPadding` to golden tests in `value_indicating_slider_test.dart`",
"> Do you know of any cases where someone would actually want the original behavior? 

I haven't seen anyone wanting that behavior; it looks broken to me as well. However, if anyone expects that, they can definitely turn it off by marking `enabled` as false in the configuration. Furthermore, similar to `year2023` flag, I think we can deprecate `enabled` flag in the future if no one reports a similar report.
",
Great suggestion!,
"Yes, looks cleaner!",
"When looking back at this, I found that user may have to pass a big cornerPadding value to prevent the label text from spilling out of the shape. Turned out that `cornerPadding` was accounted for height only. So in the fixup commit, I also update the size of shape for this case. So that `cornerPadding` will be accounted for both width and height axes; Let's see this new golden image :

<img width=""2400"" height=""1800"" alt=""slider_roundedrect_shape_multiline_label"" src=""https://github.com/user-attachments/assets/d3c2dd70-c254-46ae-8aea-037a8e59e178"" />
",
"Now that this is abstract, I think you don't need to include a constructor at all.",
Maybe ValueIndicatorMultilineConfig.cornerPadding should be an EdgeInsets so that users can specify how much horizontal and vertical padding they want? Then it's also consistent with things like Padding.padding.,
"Thanks for splitting these out, looks pretty clean this way.",
Sounds good.,
Nit: I would prefix this with an underscore so it's clear that it's local to this file.,
/gemini review,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The four new regression tests share a lot of boilerplate code for setting up and pumping the dialog widget. To improve maintainability and reduce duplication, you could extract this logic into a helper function. This would make the tests more concise and easier to read.

For example, you could create a helper like this:

```dart
Future<void> _pumpDialogWithTheme({
  required WidgetTester tester,
  required Widget dialog,
  required TargetPlatform themePlatform,
}) async {
  await tester.pumpWidget(
    MaterialApp(
      theme: ThemeData(platform: themePlatform),
      home: Material(
        child: Builder(
          builder: (BuildContext context) {
            return Center(
              child: ElevatedButton(
                child: const Text('X'),
                onPressed: () {
                  showDialog<void>(
                    context: context,
                    builder: (BuildContext context) => dialog,
                  );
                },
              ),
            );
          },
        ),
      ),
    ),
  );

  await tester.tap(find.text('X'));
  await tester.pumpAndSettle();
}
```

And then use it in your tests to simplify them.",
"If we want to call out the platform adaptiveness, we should be more specific and how they affect the screen reader in each platform. In this case, I don't think we should mention anything about this, because setting name route to false on iOS and macos seems to make the title not be announced twice. instead of causing an actual different between platform",
same,
"Thank you for reviewing this! It makes sense as the additional docs seem to be overstated for a small different behavior. Thus, I removed these documentation changes. ",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"> 1. Can you just add a symbolic link between the new location and the old location?  Maybe the checker would have to be updated a bit to make sure that works.
> 2. We could make our own symbolic link structure in //engine/src/flutter/tools/licenses_cpp/data/links that maps the 2 directories.  Something like text files with 2 lines that specify the links source and destination?

Currently we do not check symlinks into the Git-managed parts of the engine tree.  I'd like to maintain that property in order to simplify source control and ensure that the tree functions on platforms like Windows where symlinks may not be available.

Projects that use GN/Ninja and other Chromium tools typically place third-party dependencies in `//third_party`.  Our use of `//flutter/third_party` is nonstandard and is a legacy of the abandoned attempt to merge the buildroot and engine trees before we moved to the monorepo.
",
"CI had a failure that stopped further tests from running.  We need to investigate to determine the root cause.

SHA at time of execution: adf762e3deaafc3a920cc5747e055d4166c0f4d2.

Possible causes:
* **Configuration Changes:** The `.ci.yaml` file might have been modified between the creation of this pull request and the start of this test run. This can lead to ci yaml validation errors.
* **Infrastructure Issues:** Problems with the CI environment itself (e.g., quota) could have caused the failure.

A blank commit, or merging to head, will be required to resume running CI for this PR.

**Error Details:**

```
GitHub Error: You have exceeded a secondary rate limit. Please wait a few minutes before you try again. For more on scraping GitHub and how it may affect your rights, please review our Terms of Service (https://docs.github.com/en/site-policy/github-terms/github-terms-of-service) If you reach out to GitHub Support for help, please include the request ID DF9E:C7F23:B13B3D:2F61C0B:68F96E90.
```

Stack trace:

```
#0      GitHub.handleStatusCode (package:github/src/common/github.dart:486:5)
#1      GitHub.request (package:github/src/common/github.dart:422:7)
<asynchronous suspension>
#2      GitHub.requestJson (package:github/src/common/github.dart:323:22)
<asynchronous suspension>
#3      RetryOptions.retry (package:retry/retry.dart:131:16)
<asynchronous suspension>
#4      LuciBuildService.scheduleTryBuilds (package:cocoon_service/src/service/luci_build_service.dart:246:24)
<asynchronous suspension>
#5      Scheduler._runCiTestingStage (package:cocoon_service/src/service/scheduler.dart:1253:9)
<asynchronous suspension>
#6      Scheduler.proceedToCiTestingStage (package:cocoon_service/src/service/scheduler.dart:1314:7)
<asynchronous suspension>
#7      Scheduler._closeSuccessfulEngineBuildStage (package:cocoon_service/src/service/scheduler.dart:1121:5)
<asynchronous suspension>
#8      Scheduler.processCheckRunCompleted (package:cocoon_service/src/service/scheduler.dart:1054:9)
<asynchronous suspension>
#9      PresubmitLuciSubscription.post (package:cocoon_service/src/request_handlers/presubmit_luci_subscription.dart:135:7)
<asynchronous suspension>
#10     RequestHandler.service (package:cocoon_service/src/request_handling/request_handler.dart:45:20)
<asynchronous suspension>
#11     SubscriptionHandler.service (package:cocoon_service/src/request_handling/subscription_handler.dart:140:5)
<asynchronous suspension>
#12     createServer.<anonymous closure> (package:cocoon_service/server.dart:339:7)
<asynchronous suspension>

```
",
"Can you pipe this through to `LicenseChecker::Flags`, please?  One of the big problems with the last license checker was that as people patched it they co-mingled data and logic piecemeal which made it hard to focus on fixing the actual logic.  There is already an example there for you.",
"no action required: Unfortunately the way the license checker is designed is to be auditable.  So even though we don't parse any of these files, just looking at them causes a cost in disk access and logs.  This is going to make the logs much harder to audit.",
done - moved the root package name to `LicenseChecker::Flags`,
"I added these filters out of caution to ensure that those directories would never be crawled.  But from what I can tell they are not really necessary.

If I delete those three lines from `exclude.txt`, then when I run the license script it still produces the correct output.  I did not see anything in the license checker's logs that mentions paths within `out`, `fuchsia`, or `build_overrides`.

Should I remove these lines from `exclude.txt`?",
"Here's the output from above: https://logs.chromium.org/logs/flutter/buildbucket/cr-buildbucket/8700357321091203633/+/u/test:_Run_license_cpp/stdout

It didn't add a bunch of `EXCLUDE: ""out/` examples.  I forgot that's because on CI we put our build outputs elsewhere.  It did add a fair bit of `EXCLUDE: ""third_party/fuchsia-sdk` but the execution time is the same.

> Should I remove these lines from exclude.txt?

No, I think it's prudent to keep them.  It won't affect CI runs but it will affect local runs.",
"Can you pipe this up to the command line flags please?  That way when it's executed it looks like this:

`licenses_cpp --path foo/bar --root-package-name=bar`

Can you measure the time it takes to run the license checker locally before your change and after?  I'm interested to see what the exclusion of the `out/` directory is going to do to runtime (and the noise in the logs).  If it is reasonable I'm fine with this approach for now and leave it as a potential cleanup in the future to allow out-of-tree inclusions instead of dropping the scanned directory one folder higher.  I think that is the better solution.",
"I'd make the root-package-name flag optional, where not supplying one keeps the old logic.",
"Added a command line flag.

This PR does not significantly change the running time of the license checker.

Results for `time ci/licenses_cpp.sh host_release` on my Linux setup:

| With this PR | Without this PR |
| ----- | ----- |
| real    15.611s | real    14.943s |
| user    8.646s | user    8.693s |
| sys     5.779s | sys     5.464s |
",
nit: `flags.root_package_name.value_or(GetDirFilename(working_dir))`,
I wanted to avoid calling `GetDirFilename` in the common case where the root package name has a value.  (The engine's current C++20 toolchain does not provide `std::optional::or_else`),
"Reviewers, I do have some comments:

1. Let me know if there's someone more appropriate to review such a change!
2. I don't _think_ this would really be considered a breaking change, but let me know if I'm wrong.
3. While testing locally, I ran `flutter test material/ --update-goldens` because otherwise goldens tests would fail. Does that indicate another step I need to take to land this?

Thanks for your help in advance!
",
"This change appears to align with desktop guidelines:

* Windows uses basic arrow cursor instead of click cursor for buttons: https://learn.microsoft.com/en-us/windows/apps/design/input/mouse-interactions#cursors
* macOS uses basic arrow cursor instead of click cursor for buttons: https://developer.apple.com/design/human-interface-guidelines/pointing-devices#Pointers

(I originally thought this change went against desktop guidelines, but it turns out I was wrong!)",
"Regarding the name, I think `adaptiveClickable` is more correct in terms of grammar, while `clickableAdaptive` might be too strange to be readable at a glance. Not strong though. I'll leave this option to native English speakers. (Maybe we can collect some opinions.)

Why do we need a `WidgetStateMouseCursor.basic`? It seems to me that it's just for documenting, and for this case you can simply use `SystemMouseCursors.basic`.

Can you explain more what you're hesitant about? The templates are currently using `SystemMouseCursors` because we didn't have such a `WidgetStateMouseCursor` before. Now that we don't we can greatly simplify the code. :) 

",
@dkwingsmt Sorry for the delay -- this is ready for a review now!,
Fixed comments to reference `WidgetStateMouseCursor.adaptiveClickable` and removed unnecessary `fallbackCursor` variables.,
"Personally, I'm not a fan of the name `statelessClickable`. I think this should just be `basic` or something. On it's own, nothing about this static constant has anything to do with clickable logic.

We could add a static method that takes either a boolean, or the platform, which either returns clickable for the web, and basic for others? Maybe something like `adaptiveClickable`, or `clickableForWeb`?",
"I personally am suuuppeerrr pro cleaning up the `kIsWeb` checks all over the place, so I vote for an `adaptiveClickable` method--great idea! @dkwingsmt thoughts on proceeding in that direction?",
Bump @dkwingsmt @MitchellGoodwin for thoughts!,
"I'm a fan of the `adaptiveClickable` option, but I'm unconfident that name is descriptive enough",
We could do something like `adaptiveButtonHoverCursor`?,
"My concern is that ""adaptive"" on it's own is a little vague in this case. Maybe `platformAdaptiveClickable`? But that is a little long. `clickableAdaptive` is probably better. It kind of matches the ""constructor.adaptive"" pattern we have.",
"Made the change to rename the cursor to `basic` and add a static method called `clickableAdaptive`!

I did not modify the various templates to use the static method so those still have the `kIsWeb` checks but let me know if using the method would be preferred. The templates use `SystemMouseCursors` instead of `WidgetStateMouseCursor`s or `MouseCursor` so that's why I was hesitant there.",
"I'd prefer this is rewritten with a full function similar to `basic`  or `clickable`, so that this value can be a `const`.",
"Why not this?
```suggestion
final MouseCursor? effectiveMouseCursor = WidgetStateProperty.resolveAs<MouseCursor?>(
      widget.mouseCursor ?? WidgetStateMouseCursor.adaptiveClickable,
```",
"Why not this?
```suggestion
  /// If this property is null, [WidgetStateMouseCursor.adaptiveClickable] will be used.
```",
Same,
Same,
Same,
"I'd suggest splitting the addition of this property in a separate PR (or not at all if you're not feeling it). It seems to me that this is not a must for this PR, and this PR is a bit complicated already.",
Same,
Maybe just refer `WidgetStateMouseCursor.adaptiveClickable`,
Same,
"My understanding is that this is a must because otherwise folks would not have a way to override the default behavior I'm changing. If you feel strongly about splitting this into another PR let me know, but this PR would touch just as many files without these changes, so I don't see the value of doing so.",
That makes sense. What do you think if we split the two mouseCursor properties? Maybe leave `mouseCursor` for the button and add an `itemMouseCursor`.,
Explain default value,
"Isn't this simply
```
  /// * `mouseCursor`: [WidgetStateMouseCursor.adaptiveClickable]
```
Since the WidgetState part is about the enabling state?


There are a few other similar cases throughout the PR.",
"Technically this can be simplified to `enabledMouseCursor: kIsWeb ? SystemMouseCursors.click : SystemMouseCursors.basic`, isn't it?",
"I think it's better to split the explanation by platforms since it's a bit convoluted. I propose the following version, which also explains its common usage. Feel free to tweak it:
```dart
  /// A platform-adaptive mouse cursor for clickable widgets, which resolves
  /// differently based on the widget's state and the platform.
  ///
  /// On web platforms, this cursor resolves to [SystemMouseCursors.click] by
  /// default. If the widget is disabled, it resolves to
  /// [SystemMouseCursors.basic].
  ///
  /// On non-web platforms, this cursor always resolves to
  /// [SystemMouseCursors.basic].
  ///
  /// This cursor is commonly used for interactive widgets like buttons. The
  /// difference in behavior across platforms reflects native conventions (e.g.,
  /// web uses a hand pointer for buttons, while desktop platforms do not).
```",
"I need some clarity here because we've full circle in the review process; I had this before but I thought you suggested we reference adaptive clickable instead (e.g. https://github.com/flutter/flutter/pull/171796#discussion_r2418540563).

In fact, I just changed both the disabled and enabled mouse cursor for default button styles to `WidgetStateMouseCursor.adaptiveClickable` (part of whose purpose was to get rid of the `kIsWeb` checks everywhere) to address https://github.com/flutter/flutter/pull/171796#discussion_r2446052053. I realize those comments were about the documentation itself but it wouldn’t make sense to me to reference a different value in the documentation than what we set for the actual disabled and enabled mouse cursors in the code.

To me, bringing back the `kIsWeb` check version looks less simplified. However, I defer to you on what you prefer here. Just let me know.",
"Oh they're referring to different things. 

For documentation, we use `[WidgetStateMouseCursor.adaptiveClickable]` because the doc for `[WidgetStateMouseCursor.adaptiveClickable]` has explained everything pretty clearly and we shouldn't bother repeating ourselves again anywhere if possible.

For implementation, since this specific value is only for the enabled cursor, it's not needed to resolve the value again, and instead we can resolve it manually by providing the `SystemMouseCursor`. (I'm not strong on this. The current way of using `WidgetStateMouseCursor.adaptiveClickable` is easier to maintain and understand, and therefore makes sense too.)

Let me know if you still find something unclear. And thanks for asking!",
Ah gotcha understood. SGTM! I'm pro not having the value resolve twice so I'll make the change.,
"```suggestion
  /// The cursor for a mouse pointer when it enters or is hovering over the
  /// this button's [items].
  ///
  /// {@macro flutter.material.InkWell.mouseCursor}
  ///
  /// If this property is null, [WidgetStateMouseCursor.adaptiveClickable] will be used.
```",
"> > applies paragraph spacing (margin-bottom) by wrapping its contents with a bottom Padding.
> 
> Will this handle cases where developer use \n\n to generate paragraph within a single text widget? or is this something that we don't care about?

I want to say we don't really care about that case since the web doesn't seem to properly handle that case either. The extensions and bookmarklet's i've tried only apply ""paragraphSpacing"" between ""p"" elements.",
"CI had a failure that stopped further tests from running.  We need to investigate to determine the root cause.

SHA at time of execution: ac4958337e4fbf04e237ad484b9eaa52fafac280.

Possible causes:
* **Configuration Changes:** The `.ci.yaml` file might have been modified between the creation of this pull request and the start of this test run. This can lead to ci yaml validation errors.
* **Infrastructure Issues:** Problems with the CI environment itself (e.g., quota) could have caused the failure.

A blank commit, or merging to head, will be required to resume running CI for this PR.

**Error Details:**

```
GitHub Error: You have exceeded a secondary rate limit. Please wait a few minutes before you try again. For more on scraping GitHub and how it may affect your rights, please review our Terms of Service (https://docs.github.com/en/site-policy/github-terms/github-terms-of-service) If you reach out to GitHub Support for help, please include the request ID DFBA:12C049:17708C1:6367FB1:68F96E92.
```

Stack trace:

```
#0      GitHub.handleStatusCode (package:github/src/common/github.dart:486:5)
#1      GitHub.request (package:github/src/common/github.dart:422:7)
<asynchronous suspension>
#2      GitHub.requestJson (package:github/src/common/github.dart:323:22)
<asynchronous suspension>
#3      RetryOptions.retry (package:retry/retry.dart:131:16)
<asynchronous suspension>
#4      LuciBuildService.scheduleTryBuilds (package:cocoon_service/src/service/luci_build_service.dart:246:24)
<asynchronous suspension>
#5      Scheduler._runCiTestingStage (package:cocoon_service/src/service/scheduler.dart:1253:9)
<asynchronous suspension>
#6      Scheduler.proceedToCiTestingStage (package:cocoon_service/src/service/scheduler.dart:1314:7)
<asynchronous suspension>
#7      Scheduler._closeSuccessfulEngineBuildStage (package:cocoon_service/src/service/scheduler.dart:1121:5)
<asynchronous suspension>
#8      Scheduler.processCheckRunCompleted (package:cocoon_service/src/service/scheduler.dart:1054:9)
<asynchronous suspension>
#9      PresubmitLuciSubscription.post (package:cocoon_service/src/request_handlers/presubmit_luci_subscription.dart:135:7)
<asynchronous suspension>
#10     RequestHandler.service (package:cocoon_service/src/request_handling/request_handler.dart:45:20)
<asynchronous suspension>
#11     SubscriptionHandler.service (package:cocoon_service/src/request_handling/subscription_handler.dart:140:5)
<asynchronous suspension>
#12     createServer.<anonymous closure> (package:cocoon_service/server.dart:339:7)
<asynchronous suspension>

```
",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

The current implementation of the `DomMutationObserver` callback has a few issues that make it not robust enough for detecting all typography setting changes:

1.  **Incorrect handling of node removals**: The condition `record.addedNodes!.isEmpty` is used to detect removals. This is too broad as it triggers for any node removal in the subtree, not just `<style>` tags. Also, it resets typography settings to default, which might be incorrect if other styles are still active. It should re-evaluate the computed styles instead.
2.  **Early exit**: The `return` statement within the loop will cause the observer to stop processing other mutations in the same batch, potentially leading to an incorrect state.
3.  **Missing `attributes` handler**: The observer is configured to listen for `style` attribute changes, but there's no logic to handle `record.type == 'attributes'`. This means direct modifications to the `<html>` element's style attribute won't be detected.

I suggest a more robust implementation that correctly handles these cases by checking for any relevant style-related mutation and then recomputing the typography settings once per batch of mutations.

```
    _typographySettingsObserver = createDomMutationObserver((
      JSArray<JSAny?> mutations,
      DomMutationObserver _,
    ) {
      bool needsRecompute = false;
      for (final JSAny? mutation in mutations.toDart) {
        final DomMutationRecord record = mutation! as DomMutationRecord;

        if (record.type == 'attributes') {
          needsRecompute = true;
          break;
        }

        if (record.type == 'childList') {
          bool hasStyleNode(Iterable<DomNode>? nodes) {
            if (nodes == null) {
              return false;
            }
            for (final DomNode node in nodes) {
              if (node.nodeName == 'STYLE') {
                return true;
              }
            }
            return false;
          }

          if (hasStyleNode(record.addedNodes) || hasStyleNode(record.removedNodes)) {
            needsRecompute = true;
            break;
          }
        }
      }

      if (needsRecompute) {
        final double? lineHeight = parseStyleProperty(
          domDocument.documentElement!,
          'line-height',
        )?.toDouble();
        final double? wordSpacing = parseStyleProperty(
          domDocument.documentElement!,
          'word-spacing',
        )?.toDouble();
        final double? letterSpacing = parseStyleProperty(
          domDocument.documentElement!,
          'letter-spacing',
        )?.toDouble();
        _updateTypographySettings(
          ui.TypographySettings(
            lineHeight: lineHeight,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
          ),
        );
      }
    });
```",
"1. Good suggestion, I made some changes to make the node removal more robust.
2. Will investigate this scenario.
3. From my observation, usually text spacing changes won't directly modify the existing style sheet in <head> rather they will insert/add their own stylesheet to <head> or its children, so this case isn't too important but will keep it in mind.",
I'm not a fan of setting this to an empty `TypographySettings` to disable this but I don't see another way since `configuration.copyWith(typographySettings:null)` won't work. I could build a method that makes a new `PlatformConfiguration` with `TypographySettings` cleared but it wouldn't be very maintainable if we keep adding members to `PlatformConfiguration`.,
"Should this be `lineHeightFactor` instead? It seems like a more appropriate name. 

In CSS `line-height` can accept:
- Default: normal
- `Normal` keyword
- Unitless, relative to font size, for example `2`.
- `<length>`, number followed by units `10px`
- `<percentage>`, number followed by % sign `10%`, relative to font size

but there seems to be a strong preference for unitless numbers, i.e. numbers relative to font size.

https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#prefer_unitless_numbers_for_line-height_values

In the extension and bookmarklet I tried both are using unitless values for their CSS.",
I'm curious to hear people's thoughts about implementing `paragraphSpacing` like this. On the web the extension and bookmarklet i've been using implement it by using `margin-bottom` on the `p` element.,
"Do we need to support other type of unit? If so, can a double support both unitless and `px` ?",
"I vaguely remember somewhere we do something like
```
void copyWith({SomeClass? object = _somePivateStaticObject}) {
  if (object != _somePivateStaticObject) {
     // do replace
  }
}
```

is assigning `typographySettings` an empty `TypographySettings` or null the same thing? if so we should only pick one of them to avoid this ambiguous. For example just make typographySettings to be not nullable and default to a static/const empty value.",
"Not something that blocks this pr

I noticed we start to put more and more text related settings into MediaQuery, but we also have DefaultTextStyle. What are the guideline to decide whether something should be in one vs the other?",
"Maybe,

```
The user's preferred typography settings.
```",
Is this lineHight in px? I thought this can be unitless and be something like double the existing height..etc,
"I think gpay has internal code that turns html into TextSpans
",
"Good point, I feel like this feature is sort of outside the scope of `DefaultTextStyle`. I think of `DefaultTextStyle` as a configuration provider that is set up by the application developer, `TypographySettings` is a configuration set up by the user, and cannot really be updated on the application developers end. So maybe `DefaultTextStyle` should only include app level configuration, while `MediaQuery/TypographySettings` includes user level configurations. What do you think about this? I think text scale factor and maybe bolt text would be in line with the type of settings included in `TypographySettings`.",
"Interesting, if they're converting for example `<p> ` elements into `TextSpan`s with the expectation that those `<p>` elements have `paragraphSpacing` applied to them, then that will likely not work. They would have to instead turn `<p>` elements into `Text` widgets for that expectation to be true.",
"```suggestion
    styleProperty = parsed;
```
The extra checks are not necessary. `parseFloat()` already handles the `isNaN` case.",
"IMO it doesn't make sense to set line height to an absolute number for a11y purposes. Percentage makes sense but it's basically the same as unitless, i.e. `150% == 1.5`.",
"Applying these default styles directly on the element, are browser extensions able to override them via global styles?",
"Should we add a link to files that should be updated? Maybe something like:

```suggestion
// embedders *must* be updated:
//
// * engine/src/flutter/lib/web_ui/lib/window.dart
```",
"If I'm understanding correctly yes they are able to override them via global styles, at least from the ones i've tried.",
"I think double can support unitless and `px`, from what I understand and my observations `getComputedStyle` will return `px` values, for `word-spacing`, `letter-spacing`, and `margin-bottom` we can use these 1:1 for their framework counter parts `TextStyle.wordSpacing`, `TextStyle.letterSpacing`, and `Padding`. For `line-height` we can divide it by the font size and get the `lineHeightFactor` which would be 1:1 with the frameworks `TextStyle.height`. So `lineHeight` would be a factor of `fontSize`, similar to the frameworks representation.",
"Changed this `lineHeight` to be a factor of font size similar to what `TextStyle.height` is, this makes more sense.",
"Normally, inline styles that are set directly on the element (which is what you are doing here) will override any global styles. But extensions are using `!important` to force their styles to take precedence: https://github.com/actum/text-spacing-editor/blob/6782a09bfd55d5ad7791c498804ecfbf28ece0dc/helpers/buildCSSToInject.ts#L20-L30

So you are good 🙂",
"What if one day they start to have overlaps? for example, if one day Android let's user to set the system wide font style. Do we duplicate both in DefaultTextStyle and mediaQuery?",
"In this case it feels like it would still be important to distinguish between application level configuration and system wide configuration in the case one is preferred over the other. It also feels like this type of system setting is unlikely to exposed because it is a setting that would affect many other apps as well, so the overlap might not be something we have to consider.",
"MediaQuery should be considered application level configuration. It is just by default Material app will inherited system level configuration into default MediaQuery. The developer can still override them if they want.

I guess my question is why don't we put TextStyle direclty in MediaQuery to carry the things like text space, or let TextStyle carry a TypographySettings as its property and remove the text spacing, line high...etc.",
"I see what you mean, MediaQuery is application level configuration that sometimes inherits platform system level configuration. It sort of feels like the user should be able to access system level configuration regardless of what ancestor they have / whether a developer has chosen to override these somewhere in the subtree.

If we put TextStyle under MediaQuery what is expected with regards to the parameters in TextStyle that text spacing doesn't cover like backgroundColor, decorationColor, and foregroundColor. It feels like a large API surface for what text spacing is unless we intend to try to pull those values from the platform as well.

I think TextStyle with a TypographySettings  in place of having individual members sounds reasonable. I think maybe TextStyle could even have an `applyTypographySettings` method? What do you think?",
"I don't have enough context to make a suggestion on which paradigm is better, so it is your call. I am just feel a bit confused at how we structure these settings in different part of widget tree. For example. system provides a,b,c,d all meant for Text-related widget.

when it reaches mediaquery, it bundles (a,b) into a class so it carries (a,b), c, d.

but when it reach widget it unwrap and re-bundled b and c, and it becomes a, (b, c), d.

It is a bit hard to wrap my head around these logical data class in each layer

",
a new line between first paragraph and second,
"Since this is scaling, consider re-name this to something like lineHeightScalingFactor",
"same, a new line in between",
remove this line?,
"Regarding the precise values used in the `_vs2026Response` data for the test:
```
MINGW64 $ ./vswhere -prerelease | grep -E 'displayName|installationVersion|productDisplayVersion'
installationVersion: 18.0.11116.177
displayName: Visual Studio Community 2026
catalog_productDisplayVersion: Insiders [11116.177]

MINGW64 $
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The version number `2026` is hardcoded. Consider using a constant or a configurable property to make it easier to update in the future if the versioning scheme changes. This would also improve maintainability.

It would be better to have a constant for `2026` and `18` to avoid magic numbers and improve readability.

```suggestion
      18 => 'Visual Studio 18 2026', // Use a constant here
```",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The `typographyMeasurementElementFontSize` can be `null` if `parseFontSize` fails to parse the font size. Using the null-assertion operator `!` on it will cause a crash in that case. You should add a null check to handle this possibility gracefully. It's also good practice to check for `0.0` to avoid division by zero.

```dart
    final double? typographyMeasurementElementFontSize = parseFontSize(
      _typographyMeasurementElement!,
    )?.toDouble();
    if (typographyMeasurementElementFontSize == null || typographyMeasurementElementFontSize == 0.0) {
      // The font size is not available, so we can't calculate the line height
      // scale factor. This is unlikely to happen, but we should be safe.
      _disconnectTypographySettingsObserver();
      return;
    }
    final double defaultLineHeightFactor = spacingDefault / typographyMeasurementElementFontSize;
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This block of code to apply platform text style settings is identical to the one in `didChangeDependencies` (lines 3242-3261). To improve maintainability and avoid duplication, consider extracting this logic into a private helper method that can be called from both `didChangeDependencies` and `didUpdateWidget`. This aligns with the style guide's principle of optimizing for readability and avoiding duplication.[^1]

#### Style Guide References
[^1]: The style guide recommends optimizing for readability and avoiding duplication. Extracting the duplicated logic into a helper method would adhere to these principles.",
/gemini review,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

These two new regression tests are very similar and contain duplicated code. To improve maintainability and reduce redundancy, you could extract the common logic into a helper function within a `group`. This would make the tests more concise and easier to manage in the future.

```dart
  group('PopupMenu semantics label for mismatched platforms regression test for https://github.com/flutter/flutter/issues/177003', () {
    Future<void> testPopupMenuSemanticsLabel({
      required WidgetTester tester,
      required TargetPlatform themePlatform,
      required Matcher expected,
    }) async {
      const DefaultMaterialLocalizations localizations = DefaultMaterialLocalizations();

      await tester.pumpWidget(
        MaterialApp(
          theme: ThemeData(platform: themePlatform),
          home: Scaffold(
            body: Builder(
              builder: (BuildContext context) {
                return OutlinedButton(
                  onPressed: () {
                    showMenu<void>(
                      context: context,
                      position: RelativeRect.fill,
                      items: const <PopupMenuItem<void>>[PopupMenuItem<void>(child: Text('foo'))],
                    );
                  },
                  child: const Text('open'),
                );
              },
            ),
          ),
        ),
      );

      await tester.tap(find.text('open'));
      await tester.pumpAndSettle();

      final Finder popupFinder = find.bySemanticsLabel(localizations.popupMenuLabel);
      expect(popupFinder, expected);
    }

    testWidgets(
      'is null by default on Apple platforms',
      (WidgetTester tester) async {
        // When someone sets theme.platform to TargetPlatform.android on an Apple device,
        // assistive technology like VoiceOver should work correctly by having
        // a null semantics label value by default.
        await testPopupMenuSemanticsLabel(
          tester: tester,
          themePlatform: TargetPlatform.android,
          expected: findsNothing,
        );
      },
      variant: const TargetPlatformVariant(<TargetPlatform>{
        TargetPlatform.iOS,
        TargetPlatform.macOS,
      }),
    );

    testWidgets(
      'is non-null by default on non-Apple platforms',
      (WidgetTester tester) async {
        // When someone sets theme.platform to TargetPlatform.iOS on a non-Apple device,
        // assistive technologies (Talk Back/NVDA/JAWS...) should work correctly
        // by having a non-null semantics label value by default.
        await testPopupMenuSemanticsLabel(
          tester: tester,
          themePlatform: TargetPlatform.iOS,
          expected: findsOneWidget,
        );
      },
      variant: const TargetPlatformVariant(<TargetPlatform>{
        TargetPlatform.android,
        TargetPlatform.fuchsia,
        TargetPlatform.linux,
        TargetPlatform.windows,
      }),
    );
  });
```",
same here consider combine the tests,
done! I combined two into one. Let me know if it's good enough now. Thanks!,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

Checkable widgets (like checkboxes, switches, and radio buttons) are interactive and should accept pointer events. While they often also have a `tap` action (making `isTappable` true), relying on this is implicit.

To make the logic more robust and explicit, consider adding `semanticsObject.isCheckable` to this condition. This ensures that any checkable element is interactive, even if it doesn't have a `tap` action for some reason.

You could also add a test case to `semantics_test.dart` to verify this, similar to the other interactive leaf node tests:

```dart
test('checkable leaf nodes accept pointer events', () async {
  semantics()
    ..debugOverrideTimestampFunction(() => _testTime)
    ..semanticsEnabled = true;

  final ui.SemanticsUpdateBuilder builder = ui.SemanticsUpdateBuilder();
  // A checkable node that is not also tappable.
  updateNode(builder, flags: const ui.SemanticsFlags(isChecked: ui.CheckedState.isFalse));

  owner().updateSemantics(builder.build());

  final DomElement element = owner().semanticsHost.querySelector(
    '#${kFlutterSemanticNodePrefix}0',
  )!;
  expect(
    element.style.pointerEvents,
    'all',
    reason: 'Checkable nodes should accept pointer events',
  );

  semantics().semanticsEnabled = false;
});
```

```dart
    return semanticsObject.isTappable ||
        semanticsObject.isButton ||
        semanticsObject.isCheckable ||
        semanticsObject.flags.isTextField ||
        semanticsObject.flags.isLink ||
        semanticsObject.flags.isSlider ||
        semanticsObject.isIncrementable;
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

These new tests are great for covering the new logic. However, there's a lot of repeated setup and teardown code in each test (enabling/disabling semantics, setting the timestamp function).

To improve maintainability and reduce boilerplate, you could group these related tests and use `setUp`/`tearDown` to handle the common logic. For example:

```dart
group('pointer events acceptance', () {
  setUp(() {
    semantics()
      ..debugOverrideTimestampFunction(() => _testTime)
      ..semanticsEnabled = true;
  });

  tearDown(() {
    semantics().semanticsEnabled = false;
  });

  test('non-interactive leaf nodes do not accept pointer events', () async {
    // ... test logic
  });

  test('tappable leaf nodes accept pointer events', () async {
    // ... test logic
  });

  // ... and so on for the other related tests.
});
```

This would make the tests cleaner and easier to read and maintain.",
Great feedback. Updated code.,
Great feedback. Updated code.,
"All of these have their own Semantics role or behavior (except `isSlider` [1]). Let's override the `acceptsPointerEvents` in the corresponding classes.

[1] It looks like semantic sliders are not implemented? So let's not worry about it now.",
"This only solve this particular case. I thought the hittest should block sibling when there are multiple in hittest order.

This is what we do in framework
https://github.com/flutter/flutter/blob/c63c6b08a7114517575bcf3e45275ec7a9f4e87f/packages/flutter/lib/src/rendering/box.dart#L3336",
Ideally this should always absorb hittest if position is in bound and no children wants to handle it,
"When `acceptsPointerEvents` returns false, the element becomes transparent for hit testing purposes. When it returns true, the element will be opaque for hit testing purposes.

This PR makes it so that `scopesRoute` elements behave as opaque for hit testing.

See:
https://github.com/flutter/flutter/blob/c63c6b08a7114517575bcf3e45275ec7a9f4e87f/engine/src/flutter/lib/web_ui/lib/src/engine/semantics/semantics.dart#L1798-L1802",
"Implemented engine-side declarative pointer event handling for semantics based on discussion. Please review.

",
"Implemented engine-side declarative pointer event handling for semantics based on discussion. Please review.
",
"This will likely to be used by other platform as well, we should make the language platform neutral
https://github.com/flutter/flutter/issues/177025
https://github.com/flutter/flutter/issues/177024",
is this blocking child or sibling in hittest order? or both? should document this more clearly,
"same for the comment here, should be platform neutral",
"instead of using null, consider give it a enum `SemanticsHitTestBehavior.defer` and makes it the default ",
should remove nullable and make required,
what's the infer behavior? do they inherited from the parent?,
"In framework transparent means this node receives hittest, but won't block the silbing and child behind it from receiving hittest",
Declaration should probably come first before this. Also I think you meant `Implicit behaviors`? since the behavior is inferred from semantics behavior/role,
This should be handled in framework by wrapping ModalRoute with SemanticsHitTestBehavior,
we could also handle this on the framework side by inferring SemanticsHitTestBehavior if not provided,
also ideally we should infer the `SemanticsHitTestBehavior` from the framework side if not provided. That way the platform just need to deal with SemanticsHitTestBehavior,
Thanks for reviewing. I updated the PR accordingly.,
Thanks for reviewing. I updated the PR accordingly.,
Thanks for reviewing. I updated the PR accordingly.,
Thanks for reviewing. I updated the PR accordingly.,
Thanks for reviewing. I updated the PR accordingly.,
"You're right that framework should handle this. Our architecture fully supports that. When framework provides explicit values, engine just executes them (Tier 1). Engine inference is only a backward-compatible fallback (Tier 2) because popular packages like awesome_dialog don't know about SemanticsHitTestBehavior yet. Engine inference means they work immediately.",
"You're right that framework should handle this. Our architecture fully supports that. When framework provides explicit values, engine just executes them (Tier 1). Engine inference is only a backward-compatible fallback (Tier 2) because popular packages like awesome_dialog don't know about SemanticsHitTestBehavior yet. Engine inference means they work immediately.",
Thanks for reviewing. I updated the PR accordingly.,
Thanks for reviewing. I updated the PR accordingly.,
"This pull request is trying merge the branch stable, which is the name of a release branch. This is usually a mistake. See [Tree Hygiene](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md) for detailed instructions on how to contribute to the Flutter project. In particular, ensure that before you start coding, you create your feature branch off of _master_.

This PR has been closed. If you are sure you want to merge stable, you may re-open this issue.",
"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

View this [failed invocation](https://github.com/flutter/flutter/pull/177457/checks?check_run_id=53502085182) of the CLA check for more information.

For the most up to date status, view the checks section at the bottom of the pull request.",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The `applicationId` is still set to the default example value. This must be changed to a unique identifier before publishing your app to the Google Play Store.

```kotlin
        applicationId = ""com.example.flutter_application_biodata"" // TODO: Change this to a unique ID
```",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The release build is configured to use the debug signing configuration. For a production release, you must create and use a proper release signing key. Using a debug key for release builds is insecure and will prevent you from publishing updates to your app.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There are some minor formatting issues here. Line 3 has trailing whitespace, and line 4 has inconsistent indentation. Consistent formatting improves code readability.

```suggestion
    <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>
    <uses-permission android:name=""android.permission.CAMERA""/>
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The current email validation is very basic and only checks for the presence of an '@' symbol. This can allow invalid email formats. It's better to use a regular expression for more robust validation.

```suggestion
                      validator: (value) {
                        if (value == null || value.isEmpty) return 'Email wajib diisi';
                        final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
                        if (!emailRegex.hasMatch(value)) return 'Format email tidak valid';
                        return null;
                      },
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The validation for the 'Status Mahasiswa' radio buttons is handled with a conditional `if (_statusMahasiswa == null)` which is not integrated with the form's validation system. A better approach is to wrap the radio buttons in a `FormField` widget. This allows you to use the `validator` property and display error messages in a way that is consistent with other form fields.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

For better code readability and maintainability, it's a good practice to declare all member variables at the top of the class.[^1] The `_selectedImage` variable is currently declared at the end of the class. Please move it to the top with the other state variables like `_namaController`.

#### Style Guide References
[^1]: Class members should be ordered logically, such as grouping related fields and methods. It is common practice to declare all fields at the top of the class.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The `image_picker` dependency is outdated. You are using version `^0.8.7+4`, but the latest version is `^1.1.2`. Updating to the latest version is recommended to get bug fixes, new features, and security patches.

```yaml
  image_picker: ^1.1.2
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The version specified for `flutter_lints` (`^5.0.0`) seems incorrect. The latest stable version is `^4.0.0`. Using a non-existent or unstable pre-release version can cause issues. Please update it to a stable version.

```yaml
  flutter_lints: ^4.0.0
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This widget test appears to be the default test for Flutter's counter application. It does not test any part of your biodata form application and will fail. You should either remove this test or update it to test the functionality of your `FormPage` widget to ensure effective testing.[^1]

```dart
void main() {
  testWidgets('FormPage has a title and form fields', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MaterialApp(
      home: FormPage(),
    ));

    // Verify that the form page has a title.
    expect(find.text('Form Biodata'), findsOneWidget);

    // Verify that the form fields are present.
    expect(find.byType(TextFormField), findsNWidgets(3));
  });
}
```

#### Style Guide References
[^1]: Code should be tested effectively. The current test is not relevant to the application's functionality.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177449, because - The status or check suite [Linux tool_integration_tests_3_7](https://cr-buildbucket.appspot.com/build/8700212335153811777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
/gemini review,
"you can combine this and below by doing something like
```
switch (defaultTargetPlatform)
  case TargetPlatform.iOS || TargetPlatform.macOS => findsNothing
  case _ => findsOneWidget
```",
done! I combined two into one. Let me know if it's good enough now. Thanks!,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

View this [failed invocation](https://github.com/flutter/flutter/pull/177437/checks?check_run_id=53462629584) of the CLA check for more information.

For the most up to date status, view the checks section at the bottom of the pull request.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The documentation is great at explaining what `DeviceOrientationBuilder` does and how it differs from `OrientationBuilder`. To make it even more helpful, consider explicitly mentioning that this widget requires a `MediaQuery` ancestor. This will help developers understand the dependency and avoid runtime errors if a `MediaQuery` is missing from the widget tree.

For example, you could add a paragraph like this:

```dart
/// This widget requires a [MediaQuery] ancestor to obtain the orientation.
/// Typically, this is provided by [MaterialApp] or [WidgetsApp].
```",
"This pull request was opened from and to a release candidate branch. This should only be done as part of the official [Flutter release process](https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md). If you are attempting to make a regular contribution to the Flutter project, please close this PR and follow the instructions at [Tree Hygiene](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md) for detailed instructions on contributing to Flutter.

__Reviewers__: Use caution before merging pull requests to release branches. Ensure the proper procedure has been followed.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The new public constant `kNoClientConnectedMessage` should have a documentation comment to explain its purpose, as per the style guide.[^1]

```suggestion
/// Message to show when a hot reload/restart is attempted with no clients connected.
const kNoClientConnectedMessage = 'Recompile complete. No client connected.';
```

#### Style Guide References
[^1]: All public members, including top-level constants, should have documentation comments.",
/gemini review,
"autosubmit label was removed for flutter/flutter/177160, because - The status or check suite [Google testing](http://go/frob_pr/177160) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The documentation can be made more concise and clear. This suggestion improves readability by rephrasing some sentences.

```dart
  /// This widget is only displayed in the open dropdown menu. When an item is
  /// selected, the menu closes and the text field displays the plain text of
  /// the [label].
  ///
  /// The dropdown menu's closed state is a text field, which can only display
  /// text. While custom widgets like icons or images can be shown in
  /// [labelWidget] when the menu is open, the text field will only show the
  /// [label] string upon selection.
  ///
  /// To control the text that appears in the text field for a selected item,
  /// set the [label] property to a descriptive string.
```",
@QuncCccccc Do you find this suggestion more compelling?,
Both look great to me! I think gemini make it a bit more formal:) Feel free to adopt any part of it if you think it's better.,
"""The dropdown menu's closed state is a text field, which can only display
  /// text. While custom widgets like icons or images can be shown in
  /// [labelWidget] when the menu is open, the text field will only show the
  /// [label] string upon selection.""

I like this part better. Maybe also add something like ""The dropdown menu's closed state is a text field or a read-only text field on mobile, which ..."". Because by default on mobile, or when we set `requestFocusOnTap`, the text field looks like a button.",
thanks for your suggestion! solved!,
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

The issue link should be a direct link to the issue, not a placeholder. This is critical because automated tools and release engineers rely on this link to quickly access the relevant issue.  Consider removing the placeholder text and only including the base URL, or providing a complete example.

Following the style guide [^1], error messages should be useful [32].

```suggestion
https://github.com/flutter/flutter/issues/
```

#### Style Guide References
[^1]: Error messages should be useful. [(link)](https://github.com/flutter/flutter/blob/master/.gemini/styleguide.md?plain=1#L32-L32)",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The description of the impact is split across multiple lines, which reduces readability. Consider keeping it concise and on a single line, or using bullet points for different aspects of the impact.

Additionally, the word 'consequences' is misspelled as 'consiquences'.

```suggestion
What is the impact (ex. visual jank on Samsung phones, app crash, cannot ship an iOS app)?
Does it impact development (ex. flutter doctor crashes when Android Studio is installed),
or the shipping production app (the app crashes on launch).
This information is for domain experts and release engineers to understand the consequences of saying yes or no to the cherry pick.
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The instructions for the changelog description are good, but the formatting example at line 25 could be clearer. It's not immediately obvious that `<ISSUE_NUMBER>`, `<SCENARIO>`, `<PLAFORMS(S)>`, and `<DESCRIPTION>` are placeholders. Consider using a different formatting style to emphasize that these are placeholders, or provide a concrete example.

Following the style guide [^1], documentation should be useful and provide sample code [55, 57].

```suggestion
< Replace with changelog description here >
[flutter/12345] When the app is launched [on iOS], it crashes due to a null pointer exception.
```

#### Style Guide References
[^1]: Documentation should be useful and provide sample code. [(link)](https://github.com/flutter/flutter/blob/master/.gemini/styleguide.md?plain=1#L55-L57)",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The changelog description format `[flutter/<ISSUE_NUMBER>] When <SCENARIO> [on <PLAFORMS(S)>], <DESCRIPTION>` should be on a separate line from the 'Replace with changelog description here' prompt for better readability. This makes it easier for contributors to understand where to insert their description following the prompt.

```suggestion
< Replace with changelog description here >

[flutter/<ISSUE_NUMBER>] When <SCENARIO> [on <PLAFORMS(S)>], <DESCRIPTION>
```",
"Nit, I know you didn't write this:

""or the shipping production app"" => ""or the shipping of production apps""

I think that is more the intention?",
"Super nit: ""what"" => ""which""",
"Exception has occurred.
ArgumentError (Invalid argument(s): Couldn't resolve native function 'InternalFlutter_Window_GetTitle' in 'package:flutter/src/widgets/_window_macos.dart' : No asset with id 'package:flutter/src/widgets/_window_macos.dart' found. No available native assets. Attempted to fallback to process lookup. dlsym(RTLD_DEFAULT, InternalFlutter_Window_GetTitle): symbol not found.
)",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The current logic for setting maximum constraints is incorrect. It fails to apply a constraint if `maxWidth` or `maxHeight` is 0, which is a valid constraint. It also incorrectly removes all maximum constraints if only one of the dimensions is unconstrained (or constrained to a non-positive value).

A better approach is to handle each dimension's constraint independently, checking for infinity and mapping it to `CGFLOAT_MAX`.

For example:
```objc
double max_width = isinf(constraints.max_width) ? CGFLOAT_MAX : constraints.max_width;
double max_height = isinf(constraints.max_height) ? CGFLOAT_MAX : constraints.max_height;
[self setContentMaxSize:NSMakeSize(max_width, max_height)];
```
You may need to `#include <cmath>` to use `isinf`.",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The `preferredConstraints` and `title` parameters are not being passed to the `RegularWindowControllerMacOS` constructor. This will cause window constraints and title set during creation to be ignored.

```dart
    final RegularWindowControllerMacOS res = RegularWindowControllerMacOS(
      owner: this,
      delegate: delegate,
      preferredSize: preferredSize,
      preferredConstraints: preferredConstraints,
      title: title,
    );
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There are a few Swift style violations here that go against the Google Swift Style Guide:[^1]

*   There should not be a space before the colon in a type annotation (`var engine: FlutterEngine?`).
*   Semicolons at the end of statements should be removed.
*   There should be a space after the colon for named arguments (`withEntrypoint: nil`).

```suggestion
  var engine: FlutterEngine?

  override func applicationDidFinishLaunching(_ notification: Notification) {
    engine = FlutterEngine(name: ""project"", project: nil)
    engine?.run(withEntrypoint: nil)
  }
```

#### Style Guide References
[^1]: Swift code should follow the Google Swift Style Guide.",
Disagree. I don't think there's much value in being able to specify maximum window size 0 in either dimension given that NSWindow has normally minimum height of 1 and minimum width at least the size of traffic lights.,
Was this added accidentally? We have no counter in this demo app :),
I would try merging up and see if the async-ification makes this work for you without the delays :),
Should this not be set in dart nowadays?,
Is this needed too?,
"```suggestion
    if (!Platform.isMacOS) {
      throw UnsupportedError('Only available on the macOS platform');
    }
```",
"```suggestion
/// [WindowingOwner] implementation for macOS.
///
/// If [Platform.isMacOS] is false, then the constructor will throw an
/// [UnsupportedError].
///
/// {@macro flutter.widgets.windowing.experimental}
///
/// See also:
///
///  * [WindowingOwner], the abstract class that manages native windows.
```",
"Does this need to be public? If not, let's hide it. If it should be, then we need to improve the docstring here",
"Could this be private to this file? If it can, then let's make it private. Otherwise, we will need to improve the docstrings. See the win32 implementation for inspiration on the docstrings :)",
I think it was added by flutter create. Removing.,
Good catch. We indeed control that logic from dart code now.,
"Fixed already, just forgot to push.",
I'm not sure really. Is there good reason to return arbitrary window handle for situation where we don't have the controller?,
It needs to be public. The idea is to let user cast to it in case we have platform specific functionality that we want to expose.,
Nope.,
"```suggestion
  /// Returns window handle for the current window.
  ///
  /// The handle is a pointer to an NSWindow instance.
  Pointer<Void> getWindowHandle() {
```",
"```suggestion
  /// Creates a new regular window controller for macOS.
  ///
  /// When this constructor completes the FlutterView is created and framework is aware of it.
```",
This is the general format of flutter constructors,
Can we add the `title` here instead of calling `setTitle` after the window has been created?,
"I can't think of one for now, but if you can, we can leave it public.",
"```suggestion
  /// Returns the window handle for the given [view], or null is the window
  /// handle is not available.
  /// 
  /// The window handle is a pointer to the NSWindow instance.
```",
Not sure why?,
"It's a nit, but the title is technically an initialization parameter that can be sent up with the initial values. I'm not attached either way, but we made this particular change for Win32",
"Instead of removing this, can we make it not wait on the MacOS platform only? This awaiting is very useful to prove the Win32 and Linux platforms. I would rather just do something different on MacOS in this method then have the other platforms change to accommodate MacOS",
"```suggestion
/dev/devicelab/bin/tasks/windowing_test_macos.dart @knopp @flutter/desktop
```",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"This pull request was opened from and to a release candidate branch. This should only be done as part of the official [Flutter release process](https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md). If you are attempting to make a regular contribution to the Flutter project, please close this PR and follow the instructions at [Tree Hygiene](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md) for detailed instructions on contributing to Flutter.

__Reviewers__: Use caution before merging pull requests to release branches. Ensure the proper procedure has been followed.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There's a potential inconsistency here. The code calls `_vmService.service.reloadSources`, so `e.callingMethod` in the `catch` block will be `'reloadSources'`. However, `hotReloadMethod` is initialized by checking for a service extension, which could result in a different string and cause the error check to fail.

Since `reloadSources` is a core VM service method, it's safer to remove the service extension lookup to ensure the error is always caught correctly.

```suggestion
          const String hotReloadMethod = 'reloadSources';
```",
/gemini review,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

These new tests are great for covering the regression. I have a couple of suggestions to improve the structure and reduce some code duplication.

1.  **Consolidate test groups**: Both new test groups are for the same regression test (`#177005`). You could combine them under a single parent `group` to make the structure clearer, like this:
    ```dart
    group('Drawer semantics for mismatched platforms (regression test for #177005)', () {
      group('label', () {
        // ... tests for label
      });
      group('barrier', () {
        // ... tests for barrier
      });
    });
    ```

2.  **Refactor test helpers**: The helper functions `testDrawerSemanticsLabel` and `testDrawerSemanticsBarrier` share a lot of setup code. This could be extracted into a common helper function to reduce duplication. For example:
    ```dart
    Future<void> _pumpDrawerWithMismatchedPlatform({
      required WidgetTester tester,
      required TargetPlatform themePlatform,
    }) async {
      final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
      await tester.pumpWidget(
        MaterialApp(
          theme: ThemeData(platform: themePlatform),
          home: Scaffold(
            key: scaffoldKey,
            drawer: const Drawer(child: Text('Drawer')),
            body: Container(),
          ),
        ),
      );
      expect(find.text('Drawer'), findsNothing);

      scaffoldKey.currentState!.openDrawer();
      await tester.pumpAndSettle();
      expect(find.text('Drawer'), findsOneWidget);
    }
    ```
    Then, the existing helpers could be simplified by calling this new function.

These changes should improve the readability and maintainability of the tests.",
you can combine this and the next by update the expect to be defaultTargetPlatform adaptive,
done! I combined label and barrier tests into one. Let me know if it's good enough now. Thanks!,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

To avoid duplicating the version string and adhere to the 'Avoid duplicating state' principle, you could define `templateAndroidGradlePluginVersionForModule` in terms of `templateAndroidGradlePluginVersion`.[^1]

```suggestion
const templateAndroidGradlePluginVersion = '8.11.1';
const templateAndroidGradlePluginVersionForModule = templateAndroidGradlePluginVersion;
```

#### Style Guide References
[^1]: The style guide advises to avoid duplicating state and keep a single source of truth.",
"This comment is helpful but what would be better would be a test that compares `templateAndroidGradlePluginVersion` with `maxKnownAgpVersionWithFullKotlinSupport` and makes sure that max is greater than template. 

While you are at it please add a test for `maxKnownAndSupportedAgpVersion` is equal to or less than `maxKnownAgpVersion` and a test (or one test that verifies all conditions) that ensures that `maxKnownAgpVersionWithFullKotlinSupport` is less than `maxKnownAndSupportedAgpVersion`. ",
"Hi @chunhtai! 👋

Thank you for the detailed feedback! I've addressed all your points:

## ✅ Feedback Addressed

### 1. **Dartpad Tool Added**
- Replaced `{@tool snippet}` with `{@tool dartpad}` for highContrastTheme
- Example now points to `examples/api/lib/material/app/high_contrast_override.0.dart`
- Ready for DartPad integration as requested

### 2. **Working Test Included**
- Added comprehensive test at `examples/api/test/material/app/high_contrast_override.0_test.dart`
- Test passes successfully ✅
- Covers MediaQuery override functionality and UI interaction

### 3. **Proper Documentation Structure**
- Added missing snippet for highContrastDarkTheme with code example
- Consistent documentation format across both parameters
- Clear examples showing MediaQuery override pattern

### 4. **Clean Example Implementation**
- Complete working example demonstrating the MediaQuery approach
- Interactive switch to toggle high contrast override
- Real-time status display showing override effects
- Sample UI elements to visualize theme differences

## 🧪 Verification
```bash
flutter test examples/api/test/material/app/high_contrast_override.0_test.dart
# ✅ All tests passed!

flutter analyze packages/flutter/lib/src/material/app.dart --fatal-infos  
# ✅ No issues found!
```

The example is now ready for DartPad integration and provides developers with a clear demonstration of the MediaQuery override pattern you suggested.

Could you please review the updated implementation? I believe it now addresses all the architectural and documentation requirements.

Thank you for your guidance! 🙏",
"Thanks for the updates @AnuragTiwari1508, it looks like there is an analysis issue with this PR, and some comments that have not been addressed yet.",
"@AnuragTiwari1508 Hi, are you able to take a look at the analysis errors and comments?",
"@dkwingsmt  Thanks for pointing that out! 🙌
I’ve already made changes based on the previous feedback. If there are still any issues that persist, please let me know — I’ll take a look right away.",
"> Thanks for pointing that out! 🙌 I’ve already made changes based on the previous feedback. If there are still any issues that persist, please let me know — I’ll take a look right away.

@AnuragTiwari1508 there are current failures here I think @dkwingsmt was referring to. Can you resolve them?",
"@AnuragTiwari1508 I'm talking about the CI checks Linux analyze failing. 

<img width=""494"" height=""155"" alt=""image"" src=""https://github.com/user-attachments/assets/7692df55-1863-49f9-a088-828b35f2009a"" />


If you keeps clicking into the details you'll find some (typically formatting) error that needs fixing. (Ignore the tree-status one)",
"@dkwingsmt  Thanks, for clarifying! I’ll check the CI logs and fix the formatting or analysis issues as soon as possible.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

Using the null-check operator `!` can lead to runtime errors if `child` is unexpectedly null. While `child` is typically non-null when a `home` or `routes` are provided, it's safer to handle the nullable case gracefully by providing a fallback widget.

```suggestion
          child: child ?? const SizedBox.shrink(),
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The public class `HighContrastOverrideExample` is missing documentation. According to the Flutter style guide, all public members should have documentation.[^1]

```suggestion
/// An example application that demonstrates how to override the high contrast
/// setting in [MaterialApp].
class HighContrastOverrideExample extends StatefulWidget {
  const HighContrastOverrideExample({super.key});
```

#### Style Guide References
[^1]: All public members should have documentation.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The public class `HighContrastDemo` and its public fields `forceHighContrast` and `onToggleHighContrast` are missing documentation. The Flutter style guide requires all public members to be documented.[^1]

```dart
/// A demo page that displays high contrast status and provides controls
/// to override it.
class HighContrastDemo extends StatelessWidget {
  /// Creates a [HighContrastDemo] widget.
  const HighContrastDemo({
    super.key,
    required this.forceHighContrast,
    required this.onToggleHighContrast,
  });

  /// Whether to force high contrast mode.
  final bool forceHighContrast;

  /// Callback to toggle the high contrast override.
  final ValueChanged<bool> onToggleHighContrast;
```

#### Style Guide References
[^1]: All public members should have documentation.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The code example uses the null-check operator `!` on `child`. While `child` is often non-null, it can be null in some routing scenarios. To promote safer code, it's better to handle the nullable case, for example by returning an empty widget.

```dart
///       child: child ?? const SizedBox.shrink(),
```",
"This paragraph is a bit confusing, maybe remove this part",
"Since you already wrote a example, you can link it as dartpad tool
See example, https://github.com/flutter/flutter/blob/e7fab7edeb02c4a725e446e8dc29c810d6470c1b/packages/flutter/lib/src/material/date_picker.dart#L160",
there is no snippet?,
I thought this won't affect the theme selection? We should wrap the mediaquery outside of the MaterialApp,
This doesn't test theme selection,
This file won't end up in the api doc or anywhere besides in the source control. Can you put these in a doc string for MaterialApp instead?,
revert this?,
This example won't affect theme selection,
This file is not needed?,
/gemini review,
"autosubmit label was removed for flutter/flutter/176694, because - The status or check suite [Google testing](http://go/frob_pr/176694) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Hi @chunhtai: I see Google test has failed. Can you please help check it? Thanks!,
"autosubmit label was removed for flutter/flutter/176694, because The base commit of the PR is older than 7 days and can not be merged. Please merge the latest changes from the main into this branch and resubmit the PR.",
"autosubmit label was removed for flutter/flutter/176694, because - The status or check suite [Google testing](http://go/frob_pr/176694) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The phrasing in this paragraph could be improved for clarity and readability, in line with the Flutter Style Guide's emphasis on optimizing for readability.

Specifically, ""receive correct semantics namesRoute"" and ""detect iOS-appropriate semantics namesRoute value"" are a bit awkward. Consider rephrasing to make the explanation smoother.

```dart
  /// macOS receive the correct `namesRoute` semantic information, even when the app's theme is configured
  /// to use a different platform's visual appearance. For example, if an app uses
  /// `ThemeData(platform: TargetPlatform.android)` on an iOS device to achieve an
  /// Android look and feel, VoiceOver can still use the iOS-appropriate `namesRoute`
  /// value to work properly.
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This is a great regression test that covers the case for iOS and macOS. To make the test suite more comprehensive, consider adding another test case for the other platforms (Android, Fuchsia, Linux, Windows) where the `namesRoute` flag should be `true` regardless of the theme's platform. This would ensure the fix is robust across all platforms.

Here's a suggestion for the additional test:

```dart
  // Regression test for https://github.com/flutter/flutter/issues/176566
  testWidgets(
    'AppBar title Semantics.namesRoute flag should be true on Android/Fuchsia/Linux/Windows platforms regardless of theme platform',
    (WidgetTester tester) async {
      // When someone sets theme.platform to TargetPlatform.iOS on an Android device,
      // TalkBack should still work correctly by having a namesRoute flag in the title's semantics.
      final SemanticsTester semantics = SemanticsTester(tester);
      await tester.pumpWidget(
        MaterialApp(
          theme: ThemeData(platform: TargetPlatform.iOS),
          home: AppBar(title: const Text('Title')),
        ),
      );

      final List<SemanticsFlag> expectedFlags = <SemanticsFlag>[
        SemanticsFlag.isHeader,
        SemanticsFlag.namesRoute,
      ];

      expect(
        semantics,
        hasSemantics(
          TestSemantics.root(
            children: <TestSemantics>[
              TestSemantics(
                id: 1,
                textDirection: TextDirection.ltr,
                children: <TestSemantics>[
                  TestSemantics(
                    id: 2,
                    children: <TestSemantics>[
                      TestSemantics(
                        id: 3,
                        flags: <SemanticsFlag>[SemanticsFlag.scopesRoute],
                        children: <TestSemantics>[
                          TestSemantics(
                            id: 4,
                            children: <TestSemantics>[
                              TestSemantics(
                                id: 5,
                                flags: expectedFlags,
                                label: 'Title',
                                textDirection: TextDirection.ltr,
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
          ignoreRect: true,
          ignoreTransform: true,
        ),
      );

      semantics.dispose();
    },
    variant: const TargetPlatformVariant(<TargetPlatform>{
      TargetPlatform.android,
      TargetPlatform.fuchsia,
      TargetPlatform.linux,
      TargetPlatform.windows,
    }),
  );
```",
"Instead of document the implementation, we should mention what this does instead.

something like

```
If false, the this title will be used as [SemanticsProperties.namesRoute] for xx platform. This means the title is announced by screen reader when transition to this route.
```",
"I will leave this part out, just mention the behavior is platform adaptive.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The test `'FadeForwardsPageTransitionBuilder default duration is 800ms'` seems to be asserting an incorrect duration. The `FadeForwardsPageTransitionsBuilder` defines `kTransitionMilliseconds` as 450, but the test name and body are written for a duration of 800ms. This test will likely fail.

To fix this, the test should be updated to assert the correct duration of 450ms. I've also corrected a comment in the test.

```dart
'FadeForwardsPageTransitionBuilder default duration is 450ms',
(WidgetTester tester) async {
  final Map<String, WidgetBuilder> routes = <String, WidgetBuilder>{
    '/': (BuildContext context) => Material(
      child: TextButton(
        child: const Text('push'),
        onPressed: () {
          Navigator.of(context).pushNamed('/b');
        },
      ),
    ),
    '/b': (BuildContext context) => const Text('page b'),
  };

  await tester.pumpWidget(
    MaterialApp(
      theme: ThemeData(
        pageTransitionsTheme: const PageTransitionsTheme(
          builders: <TargetPlatform, PageTransitionsBuilder>{
            TargetPlatform.android: FadeForwardsPageTransitionsBuilder(),
          },
        ),
      ),
      routes: routes,
    ),
  );

  Finder findFadeForwardsPageTransition() {
    return find.descendant(
      of: find.byType(MaterialApp),
      matching: find.byWidgetPredicate(
        (Widget w) => '${w.runtimeType}' == '_FadeForwardsPageTransition',
      ),
    );
  }

  expect(findFadeForwardsPageTransition(), findsOneWidget);

  await tester.tap(find.text('push'));
  await tester.pump(const Duration(milliseconds: 449));
  expect(find.text('page b'), findsNothing);
  ColoredBox coloredBox = tester.widget(find.byType(ColoredBox).last);
  expect(
    coloredBox.color,
    isNot(Colors.transparent),
  ); // Color is not transparent during animation.

  await tester.pump(const Duration(milliseconds: 2)); // Total 451ms
  expect(find.text('page b'), findsOneWidget);
  coloredBox = tester.widget(find.byType(ColoredBox).last);
  expect(coloredBox.color, Colors.transparent); // Color is transparent after animation.
},
variant: TargetPlatformVariant.only(TargetPlatform.android),
```",
Test was migrated from `page_transitions_theme_test`,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177443, because - The status or check suite [Linux plugin_test_android_variants](https://cr-buildbucket.appspot.com/build/8700223959850533777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177443, because - The status or check suite [Linux plugin_test_android_variants](https://cr-buildbucket.appspot.com/build/8700223959850533777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"Some time ago, I opened a PR related to this(#164292), but my implementation differed from the native one. Now I'm bringing a new implementation that replicates the native behavior and will work for any suffix, supporting languages beyond English. I still need to make a few adjustments to the golden test, but overall, I believe it's ready for review.",
Awesome! I'll take a look. ,
"Golden file changes have been found for this pull request. Click [here to view and triage](https://flutter-gold.skia.org/cl/github/172850) (e.g. because this is an intentional change).

If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review.



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #172850 at sha 1b990f0bd79562aea314a9be4e1691db1fe3129b_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/172850).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #172850 at sha 025b118fdd66d69b1ebf0e1eb6006b5f903aa096_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/172850).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #172850 at sha 27005aa7f795cdeafa22992bb71212595bc483d7_

",
"Thanks for your investigation. The case of `hodina` makes it much more difficult, but not impossible.

I'm imagining a universal text transformer, which automatically calculates the largest common prefix of the previous label and the next label, and crossfade the suffixes. It's kind of like `AnimatedSwitcher`, except that their common prefix doesn't fade (just like what this PR is currently doing) so that the resulting opacity won't dip in during the transition. The biggest obstacle IMO is what to do when the prefix changes (when the locale changes), since `AnimatedSwitcher` doesn't allow specifying the ""before"" widget. One way I can think of is to key the switcher with the prefix, so that when prefixes change, we can feed the switcher with the new before-suffix for one frame, and then `setState` with the new after-suffix in postframe callback... Yeah it's kind of complicated. If it feels too complicated for you we can also talk about alternative compromises such as ignoring such cases or just accept the ""opacity dip"".",
"> Thanks for your investigation. The case of `hodina` makes it much more difficult, but not impossible.
> 
> I'm imagining a universal text transformer, which automatically calculates the largest common prefix of the previous label and the next label, and crossfade the suffixes. It's kind of like `AnimatedSwitcher`, except that their common prefix doesn't fade (just like what this PR is currently doing) so that the resulting opacity won't dip in during the transition. The biggest obstacle IMO is what to do when the prefix changes (when the locale changes), since `AnimatedSwitcher` doesn't allow specifying the ""before"" widget. One way I can think of is to key the switcher with the prefix, so that when prefixes change, we can feed the switcher with the new before-suffix for one frame, and then `setState` with the new after-suffix in postframe callback... Yeah it's kind of complicated. If it feels too complicated for you we can also talk about alternative compromises such as ignoring such cases or just accept the ""opacity dip"".

Sorry for the delay, I was a bit busy over the last weeks. I understand; I wasn't seeing this scenario where the locale changes and the prefix changes as well.
I will try to implement this suggested solution by keying the AnimatedSwitcher with the prefix, it makes sense and doesn't look so complicated (maybe testing it could be more challenging)
If I feel that this becomes too complicated, I would implement the other suggestions on the current solution, so we can decide whether to just accept this behavior in the edge scenario by now.",
"This pull request executed golden file tests, but it has not been updated in a while (20+ days). Test results from Gold expire after as many days, so this pull request will need to be updated with a fresh commit in order to get results from Gold.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"@MaironLucas It seems like this PR still requires a considerable amount of work. If it might take you a while to accomplish it, would you like to convert this PR to a draft or close it for now until it's ready? You can always re-open it or open a new PR.",
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"```suggestion
```",
"Instead of defining this here, can we define it outside the class at the top of the file? Also add a comment explaining how the value was derived (there are multiple examples in the cupertino library to draw from).",
I don't think we want to add a key here just to make this picker visible for testing. Might there be other ways to find this picker in tests? See other tests in date_picker_test.dart for inspiration.,
Can you specify what iOS device and version this value was observed on?,
is this mixin needed?,
"@dkwingsmt, could you help me with that? I used the video that you put in [this comment](https://github.com/flutter/flutter/pull/164292#issuecomment-2779324899) to find this value.",
"You're right, it's not needed anymore!",
Sure! It's an iPhone 16 pro running iOS 18. ,
"Since `baseValue` is always 1, i recommend removing it from `_buildAnimatedLabel`'s parameters and just say `final String baseLabel = labelBuilder(1);` with a short comment.",
"Instead of `split`, use `currentLabel.substring(baseLabel.length)`, which is IMO clearer and also avoids a (not-yet-existing) problem where `baseLabel` appears for multiple times.",
"Also, add a comment that we only support the case where `baseLabel` is a prefix of (or equal to) `currentLabel`, since we haven't observed other cases.",
"Also, if you want to be super safe, instead of showing `baseLabel` as the prefix, show `currentLabel.substring(0, baseLabel.length)` to avoid the (not-yet-existing) problem where `baseLabel` is not a prefix.",
Can you explain why you need the custom transition builder to remove the key from the `FadeTransition`?,
"It seems to me that these tests would also pass if the text is not animated. If so, can you think of a way to test it? Maybe find the `FadeTransition` / `RenderAnimatedOpacity` around the `s` text and verify its `opacity`?",
You're right! I will remove it.,
"I'm thinking about this approach using the `substring` function. Is it safe to use this here? If there exists a scenario (or idiom) where the `currentLabel.length < baseLabel.length`,  the code could break and show nothing on the screen.
The split approach, on the other hand, will work even if this unexpected scenario occurs.",
"I was looking into the intl folder to see if there is such a scenario as I described above, and I think I found one:
At `cupertino_cs`:
``` json
  ""timerPickerHourLabelOne"": ""hodina"",
  ""timerPickerHourLabelOther"": ""hodin"",
```
Which means that there is a scenario where `currentLabel` could be larger than `baseLabel`, correct?",
"You're right, there is no need to override the default transitionBuilder here; I just forgot to delete.",
"Yes, we can assume so.",
"The widget tree in this function up to this point is functionally identical to _buildLabel, is there a way to share code here? Maybe with a private widget that wraps everything except the inline span children? or there is a potential other solution higher up in the widget tree?",
or leave as is? what do you think?,
"Sure, there must be a way of sharing the common code here, possibly by receiving this TextSpan part as a parameter of a common function or something like that. I will study possible approaches to this and update the commit.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

View this [failed invocation](https://github.com/flutter/flutter/pull/177244/checks?check_run_id=53158246151) of the CLA check for more information.

For the most up to date status, view the checks section at the bottom of the pull request.",
"An existing Git SHA, `557cb2c07b2f4256ab05edd2b939b39150095a6a`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
"Hi team,

I've pushed the fix for asserting on an empty stack.

Code Fix: I've confirmed stability by implementing the necessary try/finally block in Navigator.pop() to guarantee the _debugLocked flag is released. This resolves the framework instability issue.

Current Issue: The CI is failing because existing framework tests are now correctly hitting this new assertion and crashing.

Could a team member please check the logs and provide the file paths for the failing tests? I need to update them with expect(..., throwsA(...)) to resolve the CI failures.

Thanks!",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The `if (kDebugMode)` check is redundant here. The entire `assert` block is only executed in debug mode, so this check is unnecessary and can be removed to improve code clarity.[^1]

```dart
        final bool hasPresentRoute = _history.any(_RouteEntry.isPresentPredicate);
        if (!hasPresentRoute) {
          debugPrint(
            'Tried to pop a route on an empty stack. Ensure there is at least one route before calling Navigator.pop().',
          );
        }
```

#### Style Guide References
[^1]: Code should be optimized for readability. The redundant `if (kDebugMode)` check inside an `assert` block can be removed to make the code more concise and easier to read.",
The kDebugMode is removed. It is okay now.,
"Instead of using debugPrint, I would just return hasPresentRoute, and then add the string as an error message parameter to `assert`.",
"Then here, instead of checking debugMessages, use takeException and expect an AssertionError.",
Thanks for the suggestion! I’ve updated the code to return hasPresentRoute directly and moved the message into the assertion parameter instead of using debugPrint.,
Done! The test now uses takeException and expects an AssertionError instead of checking debug messages. This makes the test more robust and aligned with Flutter best practices.,
"This message doesn't seem accurate, I think this check the stack is empty after the pop?",
"also 
> Ensure there is at least one route before calling Navigator.pop().

this is not good neither, having just one route before the pop means it stack will be empty after the pop",
should check for the message.,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This method should have a doc comment explaining what it does, as per the Flutter Style Guide for documenting even private members.[^1]

```dart
  /// Handles the submission of the text field.
  ///
  /// If an item is highlighted in the menu, it selects that item. Otherwise,
  /// it clears the selection. Finally, it closes the menu.
  void _handleSubmitted() {
```

#### Style Guide References
[^1]: The style guide recommends using `///` for public-quality documentation, even on private members.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

For better maintainability and context, it's good practice to add a comment linking to the issue this test is for, especially since it's a regression test. This is a common pattern in this file.

```suggestion
// Regression test for https://github.com/flutter/flutter/issues/6537
testWidgets('PopupMenuDivider does not crash at zero area', (WidgetTester tester) async {
```",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177438, because - The status or check suite [Linux tool_integration_tests_6_7](https://cr-buildbucket.appspot.com/build/8700227918121624225) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"@dkwingsmt Heads up, a somewhat large change to menu item layout will land soon, so you may want to avoid reviewing that section for a day or so.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177433, because - The status or check suite [Linux build_tests_2_5](https://cr-buildbucket.appspot.com/build/8700239391251496097) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177433, because - The status or check suite [Linux build_tests_2_5](https://cr-buildbucket.appspot.com/build/8700239391251496097) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177433, because - The status or check suite [Linux build_tests_2_5](https://cr-buildbucket.appspot.com/build/8700239391251496097) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"Looks good and seems consistent with https://m3.material.io/components/menus/guidelines#691d98ba-0375-4681-8c47-a5c3e7b58798. Only suggestion I would have is to not have a scrollbar appear temporarily during the animation, if there's not going to be one in the completed animated state.",
@guidezpl I was thinking the same thing. Fix is pushed.,
"Looking at the expressive specs (https://m3.material.io/styles/motion/overview/specs), it may be worthwhile to use springs rather than easing curves, since springs can be interrupted without disrupting the animation's appearance. Let me know if I should switch over! I'm already using springs for the CupertinoMenuAnchor, so it'd be an easy change.",
"An existing Git SHA, `102c2a2987b0c5e226aedc3d1a4df9e959834dce`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
"I think these two (`_kMenuPanelHeightReverseCurve` and `_kMenuPanelHeightForwardCurve`) are not right, because they use the full duration from 0.0 to 1.0, compared to how `_kMenuPanelOpacityForwardCurve` and `_kMenuPanelOpacityReverseCurve` uses the time unit of fraction of 500ms.",
Move the asserts to the constructor?,
Add a brief doc. (What's its difference from `Interval`?),
"Where is `hoverOpenDelay` used? I can't find it used in this PR and I don't think it's common to have hover-open-delay in common apps, is it?",
"```suggestion
  /// Whether this widget should open or close a submenu with an animation.
```",
"I think it's easier to understand as `_handleFocusChange` instead of `_handleTogglingInteraction`, because it made me wonder why any event would trigger either opening or closing depending on some kind of condition, while in fact it's a function that has to deal with ""onGainFocus"" and ""onLoseFocus"" together due to API design and split at the first line of the body.",
Any particular reason for this? Will this cause the focus to be briefly assigned to some default one due to `menuController.close()` unassigning focus from itself?,
"Yeah, I agree. I added _handleTogglingInteraction because hovering can now trigger _handleFocusChange, even if the text button is already focused. 
```dart
 if (_buttonFocusNode.hasPrimaryFocus) {
    _handleFocusChange();
  } else {
    _buttonFocusNode.requestFocus();
  }
```
But, I can just call handleFocusChange()",
I think I just accidentally left it in from the focus PR I'm working on. Whoops! Thanks for catching.,
"It's used in _SubmenuButtonState._handleFocusChange and it's incredibly common. The macOS and Chromium menus both have a hoverOpenDelay. 

```dart
  void _handleFocusChange() {
    _clearHoverOpenTimer();
    if (!_buttonFocusNode.hasPrimaryFocus) {
      if (!_anchorState!._menuScopeNode.hasFocus && _animationStatus.isForwardOrCompleted) {
        _menuController.close();
      }
      return;
    }

    if (!_isOpenOnFocusEnabled) {
      return;
    }

    if (_menuController.isOpen) {
      if (_animationStatus != AnimationStatus.reverse) {
        // If the menu isn't closing, there's no reason to reopen it.
        return;
      }

      if (_isHovered) {
        // If the button is hovered, avoid reopening the menu that the user deliberately
        // closed.
        return;
      }

      if (_parent?._orientation == Axis.horizontal) {
        // Top-level (horizontal) buttons in a menubar will stay open if we
        // don't prevent it.
        return;
      }
    }

    if (widget.hoverOpenDelay == Duration.zero) {
      _menuController.open();
      return;
    }

    _hoverOpenTimer = Timer(widget.hoverOpenDelay, () {
      // The menu controller could change, so we can't use a tearoff.
      _menuController.open();
    });
  }
```

https://github.com/user-attachments/assets/4434f9ec-2abb-49cf-8521-b80c6342def2

",
Good catch! I think this needs to be done with the Interval() constructor as well. Done!,
"Elaborate a bit more on that...  I think the height curve is supposed to be applied across the whole duration (based off of: https://github.com/material-components/material-web/blob/fb6798bc02409eb79b0f8f988825efe570f803bc/menu/internal/menu.ts#L712 and https://github.com/material-components/material-web/blob/fb6798bc02409eb79b0f8f988825efe570f803bc/menu/internal/menu.ts#L828), but the opacity curve is only supposed to be applied over a fraction of the total duration. ",
Done!,
Fixed!,
Done!,
"Oh, my bad. I somehow thought they only used part of the duration. Sorry!",
"I suggest either of the following way:
* Split `_handleTogglingInteraction` into `_openSubmenu` and `_closeSubmenu`, and `handlePointerHover` calls the opening one, and `_handleFocusChange` calls either based on status, which is clearer as well.
* Rename `_handleTogglingInteraction` to something like `_openCloseMenuBasedOnFocus`.",
I kept the closing behavior in the _handleFocusChange function and split off the opening behavior into a function called _maybeOpenMenuOnHoverOrFocus ,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
the linux_host_engine.json has this as release?,
"The build that is producing the `artifacts.zip` (the one I am interested in here) seems to be configured to debug mode, see 

https://github.com/flutter/flutter/blob/ce25e25e2ce304cedabf6d883ac92721f144409e/engine/src/flutter/ci/builders/linux_host_engine.json#L44

Or am I misunderstanding how this works?",
It'll take me some time to review but first I want to say that this is a fascinating change! ,
"Gave another round of review. My apology that the review was a bit delayed due to the chaos around the US holiday lately.

",
"@/chunhtai is OOO until the end of the month, so we'll probably have to wait for him for further progress. Meanwhile I'll see if there's anything I can do.",
Hi! @O-Hannonen  Are you able to address the comments above so we can work together to get this landed? This is a great addition and I'm looking forward to it!,
"Sorry for the delay due to holidays. @dkwingsmt fixed the other issues but the one regarding the constructors, as there were conflicting requests from reviewers.",
"Looking back to UIKit's API,

<img width=""720"" height=""363"" alt=""image"" src=""https://github.com/user-attachments/assets/6c2935be-43bd-4b47-8e94-0f072d4deab8"" />

I think we might as well adopt the good old `with`. Namely,
```dart
CupertinoFocusHalo.withRect()
CupertinoFocusHalo.withRRect()
```

Derivatively, we'll have the following in the future:
```dart
CupertinoFocusHalo.withRSuperellipse()
CupertinoFocusHalo.withShape()
```

What do you think? 

cc @justinmc ",
Also there are some format failures. Not sure if there are more beyond them.,
I like the `with` naming! Might as well be consistent with UIKit.,
Also there are analyzer issues.,
"I've tried for a while and it seems that focus can not be nested. When `.focusable` views are nested, only the outmost one can be focused and display the focus ring.

In this way we have 3 options to deal with it:
1. Only the outmost focus halo can display, just like iOS.
2. All nested focus halo can display, which is the simplest.
3. Only the innermost focus halo can display, since it's the primary focus.

Although I have my own preference, option 2 is definitely acceptable. Let's keep the current way for now.",
"I can run the example files. Not sure why it didn't work for you.
<img width=""619"" height=""579"" alt=""image"" src=""https://github.com/user-attachments/assets/1b4203f8-6bc2-4d61-99ca-ce4c35b7f6ba"" />


Also analyzer issues:
```
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:29:21: Missing type annotation (expression) (always_specify_types)
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:30:36: Use 'const' with the constructor to improve performance (expression) (prefer_const_constructors)
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:31:36: Use 'const' with the constructor to improve performance (expression) (prefer_const_constructors)
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:48:21: Missing type annotation (expression) (always_specify_types)
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:49:36: Use 'const' with the constructor to improve performance (expression) (prefer_const_constructors)
packages/flutter/lib/src/cupertino/cupertino_focus_halo.dart:50:36: Use 'const' with the constructor to improve performance (expression) (prefer_const_constructors)
```",
"There's a real test failure.
<details>

```

01:26 +1377 ~7: /b/s/w/ir/x/w/flutter/packages/flutter/test/cupertino/action_sheet_test.dart: Action sheet semantics
══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════
The following TestFailure was thrown running a test:
Expected: semantics node matching:
          TestSemantics(
            id: 0,
            rect: Rect.fromLTRB(0.0, 0.0, 2400.0, 1800.0),
            children: <TestSemantics>[
              TestSemantics(
                children: <TestSemantics>[
                  TestSemantics(
                    children: <TestSemantics>[
                      TestSemantics(
                        flags: <SemanticsFlag>[SemanticsFlag.scopesRoute, SemanticsFlag.namesRoute],
                        label: 'Alert',
                        children: <TestSemantics>[
                          TestSemantics(
                            flags: <SemanticsFlag>[SemanticsFlag.hasImplicitScrolling],
                            children: <TestSemantics>[
                              TestSemantics(
                                label: 'The title',
                                children: <TestSemantics>[
                                ],
                              ),
                              TestSemantics(
                                label: 'The message',
                                children: <TestSemantics>[
                                ],
                              ),
                            ],
                          ),
                          TestSemantics(
                            flags: <SemanticsFlag>[SemanticsFlag.hasImplicitScrolling],
                            children: <TestSemantics>[
                              TestSemantics(
                                flags: <SemanticsFlag>[SemanticsFlag.isButton],
                                actions: <SemanticsAction>[SemanticsAction.tap],
                                label: 'One',
                                children: <TestSemantics>[
                                ],
                              ),
                              TestSemantics(
                                flags: <SemanticsFlag>[SemanticsFlag.isButton],
                                actions: <SemanticsAction>[SemanticsAction.tap],
                                label: 'Two',
                                children: <TestSemantics>[
                                ],
                              ),
                            ],
                          ),
                          TestSemantics(
                            flags: <SemanticsFlag>[SemanticsFlag.isButton],
                            actions: <SemanticsAction>[SemanticsAction.tap],
                            label: 'Cancel',
                            children: <TestSemantics>[
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ],
          )
  Actual: SemanticsTester:<SemanticsTester for SemanticsNode#0(Rect.fromLTRB(0.0, 0.0, 2400.0,
1800.0))>
   Which: expected node id null to have flags [SemanticsFlag.isButton] but found flags 2097160.
          Current SemanticsNode tree:
            SemanticsNode#0
             │ Rect.fromLTRB(0.0, 0.0, 2400.0, 1800.0)
             │
             └─SemanticsNode#1
               │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0) scaled by 3.0x
               │ textDirection: ltr
               │
               └─SemanticsNode#5
                 │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
                 │ sortKey: OrdinalSortKey#b1e00(order: 0.0)
                 │
                 └─SemanticsNode#6
                   │ Rect.fromLTRB(100.0, 346.9, 700.0, 592.0)
                   │ flags: scopesRoute, namesRoute
                   │ label: ""Alert""
                   │ textDirection: ltr
                   │ role: dialog
                   │
                   ├─SemanticsNode#7
                   │ │ Rect.fromLTRB(8.0, 8.0, 592.0, 65.0)
                   │ │ flags: hasImplicitScrolling
                   │ │ scrollExtentMin: 0.0
                   │ │ scrollPosition: 0.0
                   │ │ scrollExtentMax: 0.0
                   │ │
                   │ ├─SemanticsNode#8
                   │ │   Rect.fromLTRB(16.0, 13.5, 568.0, 26.5)
                   │ │   label: ""The title""
                   │ │   textDirection: ltr
                   │ │
                   │ └─SemanticsNode#9
                   │     Rect.fromLTRB(16.0, 30.5, 568.0, 43.5)
                   │     label: ""The message""
                   │     textDirection: ltr
                   │
                   ├─SemanticsNode#10
                   │ │ Rect.fromLTRB(8.0, 65.3, 592.0, 179.9)
                   │ │ flags: hasImplicitScrolling
                   │ │ scrollExtentMin: 0.0
                   │ │ scrollPosition: 0.0
                   │ │ scrollExtentMax: 0.0
                   │ │
                   │ ├─SemanticsNode#11
                   │ │   Rect.fromLTRB(0.0, 0.0, 584.0, 57.2)
                   │ │   actions: focus, tap
                   │ │   flags: isButton, isFocusable
                   │ │   label: ""One""
                   │ │   textDirection: ltr
                   │ │
                   │ └─SemanticsNode#12
                   │     Rect.fromLTRB(0.0, 57.5, 584.0, 114.6)
                   │     actions: focus, tap
                   │     flags: isButton, isFocusable
                   │     label: ""Two""
                   │     textDirection: ltr
                   │
                   └─SemanticsNode#13
                       Rect.fromLTRB(8.0, 187.9, 592.0, 245.1)
                       actions: focus, tap
                       flags: isButton, isFocusable
                       label: ""Cancel""
                       textDirection: ltr
          The semantics tree would have matched the following configuration:
            TestSemantics.root(
              children: <TestSemantics>[
                TestSemantics(
                  id: 1,
                  textDirection: TextDirection.ltr,
                  children: <TestSemantics>[
                    TestSemantics(
                      id: 5,
                      children: <TestSemantics>[
                        TestSemantics(
                          id: 6,
                          flags: <SemanticsFlag>[SemanticsFlag.scopesRoute,
SemanticsFlag.namesRoute],
                          label: 'Alert',
                          textDirection: TextDirection.ltr,
                          role: SemanticsRole.dialog,
                          children: <TestSemantics>[
                            TestSemantics(
                              id: 7,
                              flags: <SemanticsFlag>[SemanticsFlag.hasImplicitScrolling],
                              children: <TestSemantics>[
                                TestSemantics(
                                  id: 8,
                                  label: 'The title',
                                  textDirection: TextDirection.ltr,
                                ),
                                TestSemantics(
                                  id: 9,
                                  label: 'The message',
                                  textDirection: TextDirection.ltr,
                                ),
                              ],
                            ),
                            TestSemantics(
                              id: 10,
                              flags: <SemanticsFlag>[SemanticsFlag.hasImplicitScrolling],
                              children: <TestSemantics>[
                                TestSemantics(
                                  id: 11,
                                  flags: <SemanticsFlag>[SemanticsFlag.isButton,
SemanticsFlag.isFocusable],
                                  actions: <SemanticsAction>[SemanticsAction.tap,
SemanticsAction.focus],
                                  label: 'One',
                                  textDirection: TextDirection.ltr,
                                ),
                                TestSemantics(
                                  id: 12,
                                  flags: <SemanticsFlag>[SemanticsFlag.isButton,
SemanticsFlag.isFocusable],
                                  actions: <SemanticsAction>[SemanticsAction.tap,
SemanticsAction.focus],
                                  label: 'Two',
                                  textDirection: TextDirection.ltr,
                                ),
                              ],
                            ),
                            TestSemantics(
                              id: 13,
                              flags: <SemanticsFlag>[SemanticsFlag.isButton,
SemanticsFlag.isFocusable],
                              actions: <SemanticsAction>[SemanticsAction.tap,
SemanticsAction.focus],
                              label: 'Cancel',
                              textDirection: TextDirection.ltr,
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            )

When the exception was thrown, this was the stack:
#4      main.<anonymous closure> (file:///b/s/w/ir/x/w/flutter/packages/flutter/test/cupertino/action_sheet_test.dart:1751:5)
<asynchronous suspension>
#5      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:192:15)
<asynchronous suspension>
#6      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:1059:5)
<asynchronous suspension>
<asynchronous suspension>
(elided one frame from package:stack_trace)

This was caught by the test expectation on the following line:
  file:///b/s/w/ir/x/w/flutter/packages/flutter/test/cupertino/action_sheet_test.dart line 1751
The test description was:
  Action sheet semantics
════════════════════════════════════════════════════════════════════════════════════════════════════
01:26 +1377 ~7 -1: /b/s/w/ir/x/w/flutter/packages/flutter/test/cupertino/route_test.dart: showCupertinoModalPopup barrier dismissible
01:26 +1377 ~7 -1: /b/s/w/ir/x/w/flutter/packages/flutter/test/cupertino/action_sheet_test.dart: Action sheet semantics [E]
  Test failed. See exception logs above.
  The test description was: Action sheet semantics
```

</details>

I think it's just adding `isFocusable` to respective nodes. ",
@O-Hannonen Can you take a look at the test failure? We're really close to merging this PR. Thank you very much!,
"@dkwingsmt sorry for the delay, has been super busy few weeks. The failing test is now fixed!",
Where should this live? And should it be exported outside the package or not? Most likely also needed in #165977 and #167114.,
"I would create a new file under `cupertino/`, since it's a new aspect for the cupertino library.

I feel the name not intuitive enough though, because IMO the most important aspect of this class is ""focus"", which is missing from the name. At least we should call it `CupertinoFocusTraversalGroup`. I know it's long, but if we must delete a word we might consider the other two words. What do you think?
",
Thats a good point! I think `CupertinoFocusTraversalGroup` would be good if its not too long? Its a wrapper around `FocusTraversalGroup` so just adding the Cupertino prefix would be nice for consistency.,
"Yep I think the length isn't a major concern, since this class isn't mostly used by end developers but by libraries.",
"I recommend removing customization for `focusColor` for the following reasons:
* A single color might not be sufficient to describe the border. The video for the native case displayed two borders with two colors. I don't mean that this PR must reach 100% fidelity, since it's already a great start, but describing the border with a single color is in the end not correct and will be problematic when we try to improve the fidelity.
* This feature is a system wide accessibility feature and probably shouldn't need customization.",
"IMO, in the ideal world, every focusable area in Cupertino will display this focus border when focused, a natural behavior that shouldn't need explanation. Therefore I think we don't need to add documentation for it. Although I can also understand that it's a behavior and document readers might want to know all behaviors (or do they?).

What do you think?",
"Actually, I noticed that this effect is called `UIFocusHaloEffect` in iOS's API and referred to as a ""focus ring"" in Apple's [guide](https://developer.apple.com/design/human-interface-guidelines/focus-and-selection). I think either one would be a great simple name: `CupertinoHalo`, `CupertinoFocusHalo` or `CupertinoFocusRing`.

(We don't have to change it right now. Unless you have a clear opinion, we can postpone this decision while I ask round for opinions.)",
What is this clip for?,
"The `borderRadius` is very limiting. [The API used by iOS](https://developer.apple.com/documentation/uikit/uifocushaloeffect?language=objc) has different initializer for different shapes, which I think is a good design. I suggest using named constructors, such as `CupertinoFocusTraversalGroup.onRRect` `CupertinoFocusTraversalGroup.onRect` to leave room for other shapes in the future.",
Leave this property private so that this class can support other shapes.,
"This doesn't make much sense to me, since the border radius should follow exactly the child widget and should be provided explicitly. If there must be any default, then the default should be a rectangle.",
"By Flutter's style, functional types must be `typedef`'d before being used. Search for other `typedef`s for examples.",
"Also: I'm not an expert on focus, but is this really not achievable with existing APIs?",
"Hmm that's true, maybe the initially proposed names were stuck a bit too much on the traversal. Maybe the right name should come from the terminology Apple uses. 

To me `CupertinoFocusHalo` would sound the best out of these options. IMO its good that it still talks about the focus and as discussed in the other comments its not always a ""ring"", it can also be square if the usage specifies so. But let me know when you've gathered some opinions!",
"Good point, default is removed.",
Thanks for the opinion! That sounds pretty nice.,
"Good points and I agree! The system wide settings actually can be customized from iPhone settings (the color can be changed to something different than the default blue). But not sure if we even can access that customization in Flutter. 

This `focusColor` was highly inspired on how eg. `CupertinoButton` and `CupertinoCheckbox` does it. They both accept a single `focusColor` parameter. Not 100% sure what colors the native counterpart uses for the two color borders, but would assume the second color is something that is calculated based on the first color (added opacity or luminance) -> in theory the single color could still be enough to improve the fidelity. 

I'd say it should be enough to have it hardcoded to the blue as its the system wide default color and we probably can't access the info of which color the user has possibly customized it to. But if there is a need to customize the color within an app, IMO it should be an app-wide setting (eg. that the color reflects to changes in `CupertinoThemeData`). That being said, I'll remove the `focusColor` from this widget for now",
This also arises the question that should some of the widgets that already do similar halo internally take this new widget into use? Like `CupertinoButton` and  `CupertinoCheckbox `? Maybe anyways out of the scope of this PR but something to consider,
"I agree that explaining a natural behavior is redundant. But the reason for adding this comment here was that with these changes the previous comment was incorrect (in the case where this widget has focus). It talks about this widget rendering only the content and never the background of the button, but when it has focus this does render the background. But maybe its not necessary to explicitly state that?",
"Its because `CupertinoActionSheetAction` draws the background itself when focused and that would overflow, like in this picture:
<img width=""423"" alt=""image"" src=""https://github.com/user-attachments/assets/001faef7-3b0f-4ab2-bb90-48509f29ae06"" />

This is only necessary for the cancel button as `_ActionSheetMainSheet` is already wrapped with `ClipRSuperellipse`.

Another option would also be that `CupertinoActionSheetAction` does not draw the focus background itself but this `_ActionSheetButtonBackground` would draw it. But as the actions can be any widget, that may lead to very weird looking UIs if actions are something other than `CupertinoActionSheetAction`, eg if the actions are `CupertinoButton`s. 

<img width=""423"" alt=""image"" src=""https://github.com/user-attachments/assets/15bafbfa-f020-4082-8e61-e510d31f51ab"" />

Any thoughts on which approach would be better?",
"`ValueChanged` is already a typedef

So do you mean that we should create a typedef for the typedef?

```dart
typedef FocusChanged = ValueChanged<bool>;
```

Or that we should not use the `ValueChanged`?
```dart
typedef FocusChanged = void Function(bool value);
```",
"AFAIK this is not doable with existing APIs. If we would have access to focus nodes we could listen to those but in this case we don't have. 

But maybe you could request review from someone who has worked a lot with focus?",
"> ValueChanged is already a typedef 

Ah my bad. You're right.

> But maybe you could request review from someone who has worked a lot with focus?

Yeah I definitely will!",
"Good points, added named constructors!",
So `CupertinoFocusTraversalGroup.onRRect` would accept some other type of parameter than `BorderRadiusGeometry` and assign the private `_borderRadius` based on that? What type would that be then?,
"> This also arises the question that should some of the widgets that already do similar halo internally take this new widget into use? Like CupertinoButton and CupertinoCheckbox ? Maybe anyways out of the scope of this PR but something to consider

I would definitely like to see the design being consistent across Cupertino widgets. Do you mean that there are already widgets having this focus halo? Or do you mean the focus background color? 

I think it's an interesting question indeed whether we should keep the focus background color. We probably added it unaware of the halo, and we can always correct it. The problem is mostly the behavior when Cupertino widgets are run on non-Apple platforms. We can probably discuss it in a separate github issue. In general, I'd expect that there's a consistent style across Cupertino widgets when running on a given platform.

(My gut tells me that it should somehow depend on the `targetPlatform` and/or be globally configurable, but I'm not strong on it.)

As of this PR, I think the changes in this PR is safe, mostly because 1) it improves the widget toward the official behavior, and 2) it doesn't add new APIs to the widget, so we can always improve in the future without worrying about anything.",
Oooh actually I found this WWDC video https://developer.apple.com/videos/play/wwdc2021/10260/ that introduces the halo API. It seems that Apple support two kind of focus effects: some widgets have the focus halo and some widgets only have the focus highlight.,
"`CupertinoFocusTraversalGroup.onRRect` will receive a `BorderRadiusGeometry? borderRadius` but the border radius will not be accessible as a property (basically renaming it to `BorderRadiusGeometry? _borderRadius`). For example, if there is another constructors called `CupertinoFocusTraversalGroup.onShape` that receives a `ShapeBorder shape`, how would the `borderRadius` getter work? Since it's a widget, its properties wouldn't be retrieved anyway, therefore I suggest hiding properties related to shapes.",
Oh you're right. Thank you for catching it!,
"Would it work if you configure the focus color at this line? (L1678)
```
widget.pressed ? _kActionSheetCancelPressedColor : _kActionSheetCancelColor,
```

If not and we have to use clip, then you can remove the entire `ShapeDecoration` part and move the color to `DecoratedBox`'s background color. The `ShapeDecoration` is to draw the button shape, which is no longer necessary with the clipping.

Also, can you should replace `ClipRRect`  with `ClipRSuperellipse`? This is the new shape that corresponds to the continuous border RRect. :) ",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"An existing Git SHA, `5ccf827f6c08dbff8dbe5a1daa4e9bfac722f79d`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
this needs a better name. something like traversalOwner. overlay is a widget layer concept,
somewhere in the doc should mention what this paremeter does and why it is here and that is should only be used in web and why,
Does this get cleaned up if the overlayPotalParent change to null?,
This needs a better name as something along the line of traversalOwner or traversalParent,
This seems a bit easy to collide with real world usage. I think we should create a new property for setting overlay parent of a given semantics node.,
"also overlayportal is a widget layer concept, the name here should be more generic. imagine if in the future we have other non-overlay use case that also need to leverage this mechanism. The name here will be confusing ",
"since now the grafting only happens in semantics node's hittest transofmr, can you simplify the logic in _SemanticsGeomtry to make sure parent is always an ancestor of child?

also this needs a better name.",
consider turn this into a method to be reuse here and below,
This is a bit scary given people may have space in their identifier,
"oh nice, so we won't have parentData issue then",
done,
done,
done,
done,
Added 2 fields traversalParentIdentifier and traversalChildIdentifier.,
done,
Updated.,
"This should be name traversalParent or something along the line, owner has different meaning in framework",
same for other places,
in web the will the child still in hittest parent's childInTraversalOrder list? if so will this become a problem? cc @mdebbar who may know more ,
consider separate a getMatrix4FromBuffer to a method similar to getStringAttributesFromBuffer,
"This may need to be a list. also since we are not reusing Semantics.identifer, we should just use Object?",
This doesn't include grafting (for mobile platform) right?,
something I found it a bit troubling is that the hittest parent still include this node as its traversal child.,
"If we intend to keep it this way, we need to be document around this behavior and explain why, and when they will be graft to the real parent. and we also need to point out the difference between semanticsNode and SemanticsData",
Maybe mention this is typically used by overlay and overlayportal,
"In this case, we just want the grafted traversal child but not its original traversal child right?",
consider move this to a if else clause instead of inline like this for readability,
initialize to be -1,
when do we clean up the _traversalChildNodes and _traversalParentNodes when nodes in it are disposed,
"autosubmit label was removed for flutter/flutter/177070, because - The status or check suite [Mac tool_integration_tests_1_5](https://cr-buildbucket.appspot.com/build/8700903895350265393) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177070, because - The status or check suite [Google testing](http://go/frob_pr/177070) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177070, because - The status or check suite [Linux linux_host_engine_test](https://cr-buildbucket.appspot.com/build/8700447885329090705) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177070, because - The status or check suite [Google testing](http://go/frob_pr/177070) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The current test verifies the generated vertices against an `expected_head` vector with a specific order. This makes the test dependent on the implementation details of vertex generation for triangle strips. A change in the vertex generation logic, even if geometrically correct, could break this test.

To make the test more robust and independent of vertex order, I suggest sorting both the actual and expected vertices before comparison. This ensures the test verifies the set of generated points, not their specific order.

```suggestion
  std::vector<Point> actual_points;
  actual_points.assign(written_data, written_data + result.vertex_buffer.vertex_count);

  const std::vector<Point> expected_points = {Point(200.0, 200.0), Point(200.0, 300.0),
                                              Point(300.0, 200.0), Point(300.0, 300.0)};

  auto point_sorter = [](const Point& a, const Point& b) {
    if (a.x != b.x) {
      return a.x < b.x;
    }
    return a.y < b.y;
  };
  std::sort(actual_points.begin(), actual_points.end(), point_sorter);

  ASSERT_EQ(actual_points.size(), expected_points.size());
  for (size_t i = 0; i < expected_points.size(); i++) {
    EXPECT_NEAR(actual_points[i].x, expected_points[i].x, 0.1);
    EXPECT_NEAR(actual_points[i].y, expected_points[i].y, 0.1);
  }
```",
There is also a kEhCloseEnough lol,
"I thought about it and didn't use it in the beginning for mysterious reasons. :)

I've changed it to using `kEhCloseEnough` and also added a test for radii just greater than `kEhCloseEnough`.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
" @robert-ancell please fill out the PR description above, afterwards the release team will review this request.",
"This pull request was opened from and to a release candidate branch. This should only be done as part of the official [Flutter release process](https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md). If you are attempting to make a regular contribution to the Flutter project, please close this PR and follow the instructions at [Tree Hygiene](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md) for detailed instructions on contributing to Flutter.

__Reviewers__: Use caution before merging pull requests to release branches. Ensure the proper procedure has been followed.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The parentheses in this license text are escaped (e.g., `\(`), but this section is the literal license text that will be output. The backslashes should be removed to ensure the output is correctly formatted.

```
  The person who has associated a work with this document (the ""Work"")
  affirms that he or she (the ""Affirmer"") is the/an author or owner of
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The parenthesis here is escaped (i.e., `\(`), but this text is part of the literal license text. The backslash should be removed to ensure the output is correctly formatted.

```
  or contingent (the ""Waiver""). The Affirmer makes the Waiver for the
```",
@loic-sharma adding you as a reviewer in case you know the right person to check this.,
We will want to cherry pick this to stable once it lands in main.,
@loic-sharma are you able to check what is failing in the Google testing?,
"@robert-ancell An Android test failed 4 times on this PR, but the failure looked unrelated to your changes. I reran the test, and it passed! You should be good to go now :)",
Failed to create CP due to merge conflicts.<br>You will need to create the PR manually. See [the cherrypick wiki](https://github.com/flutter/flutter/blob/main/docs/releases/Flutter-Cherrypick-Process.md) for more info.,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There are a couple of minor issues with the comments for these new helper functions:

*   The comment style `///` is inconsistent with the `//` used for other static functions in this file (e.g., `has_action` on line 124). According to the Google C++ Style Guide, `//` is preferred for implementation comments.[^1]
*   There's a small typo in each comment: ""elements"" should be ""element"".

I've included a suggestion to address both points for consistency and correctness.

```c
// Returns TRUE if [flags] indicate this element is checkable.
static gboolean is_checkable(FlutterSemanticsFlags flags) {
  return flags.is_checked != kFlutterCheckStateNone ||
         flags.is_toggled != kFlutterTristateNone;
}

// Returns TRUE if [flags] indicate this element is checked.
static gboolean is_checked(FlutterSemanticsFlags flags) {
  return flags.is_checked == kFlutterCheckStateTrue ||
         flags.is_toggled == kFlutterTristateTrue;
}

// Returns TRUE if [flags] indicate this element is focusable.
static gboolean is_focusable(FlutterSemanticsFlags flags) {
  return flags.is_focused != kFlutterTristateNone;
}

// Returns TRUE if [flags] indicate this element is focused.
static gboolean is_focused(FlutterSemanticsFlags flags) {
  return flags.is_focused == kFlutterTristateTrue;
}

// Returns TRUE if [flags] indicate this element is selected.
static gboolean is_selected(FlutterSemanticsFlags flags) {
  return flags.is_selected == kFlutterTristateTrue;
}

// Returns TRUE if [flags] indicate this element is sensitive.
static gboolean is_sensitive(FlutterSemanticsFlags flags) {
  return flags.is_enabled != kFlutterTristateNone;
}

// Returns TRUE if [flags] indicate this element is enabled.
static gboolean is_enabled(FlutterSemanticsFlags flags) {
  return flags.is_enabled == kFlutterTristateTrue;
}
```

#### Style Guide References
[^1]: C++ code should follow the Google C++ Style Guide.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

To reduce code duplication across these new tests, consider using a test fixture. You could create a test fixture class that handles the setup of `mock_gtk`, `project`, `engine`, and `node`. This would make the tests cleaner and easier to maintain.

For example:
```cpp
class FlAccessibleNodeFlagsTest : public ::testing::Test {
 protected:
  void SetUp() override {
    project = fl_dart_project_new();
    engine = fl_engine_new(project);
    node = fl_accessible_node_new(engine, 123, 0);
  }

  ::testing::NiceMock<flutter::testing::MockGtk> mock_gtk;
  g_autoptr(FlDartProject) project;
  g_autoptr(FlEngine) engine;
  g_autoptr(FlAccessibleNode) node;
};

TEST_F(FlAccessibleNodeFlagsTest, FocusedFlags) {
  // Test logic here, using this->node etc.
}
```
This would apply to all the new flag-related tests in this file.",
Nit: I wonder if these tests are a good opportunity to parameterize. Seems like a bunch of similar-ish code. Not blocking though.,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"Current implementation still contains
```dart
import '../material/color_scheme.dart';
import '../material/theme.dart';
```

as import in `page_transition_theme.dart`.",
"> Current implementation still contains
> 
> ```dart
> import '../material/color_scheme.dart';
> import '../material/theme.dart';
> ```
> 
> as import in `page_transition_theme.dart`.

`widgets/` can't import `material/`, so this can't be a straightforward move to `widgets/`. I think the transition builders aren't tied to `material/`, but the page transitions theme (and any other theming stuff) probably is, so should remain.",
"> widgets/ can't import material/, so this can't be a straightforward move to widgets/. I think the transition builders aren't tied to material/, but the page transitions theme (and any other theming stuff) probably is, so should remain.

Actually @victorsanni, Its both PageTransitionBuilder and PageTransitionTheme that depends on MaterialTheme right now.

> I just wanted to chime in to say that I'm exploring adding a widgets/system_ui directory for this kind of stuff. Depending on if or what you are able to move out of Material, that might be the long term destination for it.

Sure @justinmc, I can keep this MR on hold until `system_ui` is created. ",
"> Its both PageTransitionBuilder and PageTransitionTheme that depends on MaterialTheme right now.

It's a hard requirement that the Widgets library can't import Material or Cupertino, or else it creates a circular dependency. I do not think there is a way to move PageTransitionTheme down without causing issues right now, so that should stay in Material. Ongoing investigations are happening around theming options in the Widget layer and that may provide a way to do that later.

So what should move down is PageTransitionsBuilder and the classes that extend from it. That still leaves the dependency on Theme and ColorScheme. Both are used to get a default background color for the transitions that need it. That gets partially resolved by adding a `backgroundColor` property to two of the builders. I suggest moving the `backgroundColor` property to PageTransitionBuilder so it can be used by all extended classes, and removing the theme look up from the builders. Then PageTransitionTheme, which is still in Material can see if `backgroundColor` is null and if so, it can set the `backgroundColor` using the Material theme.

Also the Cupertino transition builder will need the relevant code from Cupertino to move down as well.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"@MitchellGoodwin I have updated PR based on your suggestion, but when backgroundColor is not given in PageTransitionBuilder, I had to fallback to transparent. 
Instances where transparent was used :-
1. FadeForwardsPageTransitionsBuilder.delegatedTransition
2. FadeForwardsPageTransitionsBuilder.buildTransitions
3. ZoomPageTransitionsBuilder.delegatedTransition
4. ZoomPageTransitionsBuilder.buildTransitions",
"Hi @rkishan516, can you draft this PR and open separate PRs migrating these builders individually? Will make it much easier to review.",
"Sure @victorsanni, Will do.",
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"@victorsanni, 1st PR for migrate through breaking this PR.
https://github.com/flutter/flutter/pull/174321",
@victorsanni Next PR for this PR train is https://github.com/flutter/flutter/pull/175560.,
Next PR for this is https://github.com/flutter/flutter/pull/177080.,
Next PR for this change is https://github.com/flutter/flutter/pull/177428.,
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This file has been moved to the `widgets` library, but it still has dependencies on the `material` library. The `widgets` library is a lower-level package than `material` and should not depend on it. These imports introduce a layering violation.

To resolve this, consider removing the dependency on `Theme` and `ColorScheme` by passing the required values (like `backgroundColor`) down from the material layer where these builders are used, instead of looking them up from the context here.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"@muhammadkamel code reviewers are assigned during weekly triage, please give us time to do so instead of pinging maintainers. They may not have any knowledge of this part of the codebase.
https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#who",
"> @muhammadkamel code reviewers are assigned during weekly triage, please give us time to do so instead of pinging maintainers. They may not have any knowledge of this part of the codebase. https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#who

Hi @Piinks 

Got it!
Thanks for your support!",
"Also, are you aware of an issue for this?",
"Hi @justinmc 

I have updated the calculation of the anchor point for TextSelectionHandleType.collapsed to properly account for the cursor width.

Changed from:
Offset(_kHandleSize / 2, -4.6)
to:
Offset((_kHandleSize - cursorWidth) / 2, -4.6)

This ensures that the anchor aligns with the actual visual center of the cursor.
This change is necessary because the total handle size is 48x48 pixels, which is larger than the actual cursor width (2px), so centering must be adjusted accordingly.",
"@justinmc 

Also, this is a new screenshot after applying this calculation:
![fix_ancher](https://github.com/user-attachments/assets/239269aa-5f79-4956-baf8-c45471bbf5b0)
",
"Hi @justinmc

Could you please review the changes.",
"@justinmc 
Please, check the position of the anchor in this screenshot:

![Screenshot_1750957895](https://github.com/user-attachments/assets/e11b195d-0113-4715-ac14-bbf44473a99b)
",
"@justinmc 

And when I remove the padding that wrapped on the anchor (padding value 13px - LTRB), it look like this:

![Screenshot_1750958284](https://github.com/user-attachments/assets/bc0c7454-3843-43de-abe4-b8a1f41a8ac7)
",
"@justinmc 
And it is look like this when I add 1px to the padding without change the offset values like in the PR commits...
So I think we can work on this instead of adjust the offset values.

![Screenshot_1750958694](https://github.com/user-attachments/assets/55273f30-8c9d-4137-92b3-d56043741c33)

![Screenshot 2025-06-26 at 8 22 48 PM](https://github.com/user-attachments/assets/cb7fffa3-9fe2-4578-a52c-afbdb021bc45)


",
"This pull request executed golden file tests, but it has not been updated in a while (20+ days). Test results from Gold expire after as many days, so this pull request will need to be updated with a fresh commit in order to get results from Gold.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
@muhammadkamel Do you still have time to finish this PR? We definitely want to get this fixed! Thanks.,
"@justinmc I’ll be able to continue working on this PR in the next few days, insha'Allah.",
"Hi @justinmc,

I've added a border to the anchor container, which resolves the positioning issue of the anchor in the input field like in this image.

<img width=""487"" height=""767"" alt=""Screenshot 2025-07-23 at 4 31 25 PM"" src=""https://github.com/user-attachments/assets/33eb42f5-322d-467b-bcaf-81466de464d4"" />


Would you prefer keeping the border as a fix (with transparent color), or should we instead increase the padding of the anchor's parent by 1px on all sides (LTRB)?",
"Hi @justinmc,

Just to clarify — the reason we need to add an extra 1px is to slightly shift the anchor to the right so it aligns properly with the editor cursor. This accounts for the width of the cursor itself, as shown in this image.

<img width=""1080"" height=""2280"" alt=""Screenshot_1753278558"" src=""https://github.com/user-attachments/assets/eac5b3cf-7b1a-40fc-83af-a9cfe96aa719"" />
",
"@justinmc 

This current implementation with cursor width (value 30px):

<img width=""531"" height=""796"" alt=""Screenshot 2025-07-23 at 5 05 39 PM"" src=""https://github.com/user-attachments/assets/1c087b45-d8ba-4d32-834f-ea23e0fa3508"" />
",
"Thanks for following up here! Doing it with padding seems to make more sense and be more semantic. I'm not sure exactly what that would look like in the code though, so I'd have to see it.",
"Hi @justinmc 

I have updated the behavior of the anchor (balloon) to be in the middle of the cursor width like the Android native behavior.

Like this image:

<img width=""1080"" height=""2280"" alt=""Screenshot_1754282416"" src=""https://github.com/user-attachments/assets/55be3f7c-75fe-42d7-bc6d-835f0d6c40a0"" />

Code example:

```
import 'package:flutter/material.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Padding(
            padding: EdgeInsets.all(22.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                TextFormField(
                  cursorWidth: 22.0,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(),
                    labelText: 'Enter your name',
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```",
"@justinmc 
@loic-sharma 

Would appreciate your support in reviewing the recent changes.",
@muhammadkamel Can you take a look at this thread? https://github.com/flutter/flutter/pull/173511/files#r2277776618 It seems like this PR is lacking a vertical position solution as seen in that PR.,
"> @muhammadkamel Can you take a look at this thread? https://github.com/flutter/flutter/pull/173511/files#r2277776618 It seems like this PR is lacking a vertical position solution as seen in that PR.

@justinmc I believe the issue only affects the text selection cursor and its anchor (balloon), which I fixed in this PR.  
I've handled the `collapsed` handle case, so `right` and `left` types should now behave as expected.",
Flyby comment from triage - it looks like there are many failing tests here.,
Looks like there are still failures @muhammadkamel.,
@muhammadkamel Just a heads up this PR is still running into failures. Please feel free to reach out flutter hackers discord for help on these.,
"Can you add a comment explaining how you came up with these values? Something like:

```
// These values were eyeballed to match a physical Pixel 9 Running Android 16.
```",
I still think you should add a comment here explaining where these values come from. See https://github.com/flutter/flutter/pull/169715#discussion_r2127495258.,
I think these tests are not very useful since they just confirm the hardcoded values in the method. Could you add a test like I suggested in https://github.com/flutter/flutter/pull/169715#pullrequestreview-2898194726?,
"Ok based on your comments above like https://github.com/flutter/flutter/pull/169715#issuecomment-3009214569, it sounds like a comment like this would be good:

 > Eyeballed to match a physical Pixel 9 running Android 16, which horizontally centers the anchor 1 pixel below the cursor.

I can confirm that that's what my Pixel 9 seems to do.",
Where does this value come from? Is the cursor the same width on every platform?,
"What effect does this have on non-editable text? I guess the position of the selection handle at the edge of a non-collapsed selection?

Can you explain that in these docs?",
Incomplete docs here.,
This value could be changed externally by passing a cursorWidth parameter to widgets like TextField or TextFormField,
"You’re right — for non-editable text, cursorWidth doesn’t draw anything, but it’s still used here to position the selection handle’s anchor. In my change, I’m using it specifically to align the anchor to the middle of the cursor in editable fields, so that handle placement is consistent. I’ll update the docs to clarify that this value affects handle positioning even when the cursor isn’t visible.",
This still needs to be fixed.,
This could be a breaking change. Maybe make it not required and include the default 2.0 value here if it's not provided?,
"I tried this out locally. It seems to have no effect on anything but collapsed cursors, so it never seems to do anything in non-editable text.",
Could you add a test confirming the behavior if the cursor is wider than 2.0?,
"So the cursor width extends to the right of the collapsed selection location (this is existing behavior). Given that it's not centered, we do have to consider the cursor's width when placing the handle.

This makes me wonder, though, should we be centering the cursor and keeping the handle in the same place? What are native platforms doing here?

Here's what it looks like with an extra wide cursor:

| master | fix/text-selection-android-anchor |
| --- | --- |
| <img width=""100"" height=""93"" alt=""Image"" src=""https://github.com/user-attachments/assets/35a94afd-f4d6-45f6-a5fd-5f48096bd1a6"" /> | <img width=""110"" height=""154"" alt=""Image"" src=""https://github.com/user-attachments/assets/b5bfe536-03b2-4d8d-afb2-06f086636f6e"" /> |

*Edit*: @muhammadkamel Would you be able to investigate that? Maybe try making the cursor width extra wide on Android (something like [this](https://stackoverflow.com/questions/30395666/how-to-change-edit-text-cursor-color-and-width-in-android)) and then post a screenshot.",
"I have tried a native example in Kotlin by changing the cursor width and the handle anchor were in the middle of the cursor.

Like:

If the cursor width value is 50px, the handle anchor balloon were in the middle of it.",
Thank you for checking! Sounds like we should stick with the positioning you already have then 👍 .,
"You're welcome 🙂
What would you like me to do next?",
Can you fix the failing checks?,
"4 was a hacky and inaccurate hardcoded value, but 5 is only slightly better. We should calculate this using trigonometry. It's the difference in position of the axis aligned bounding box of the handle after rotating 90 degrees.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177425, because - The status or check suite [Linux linux_unopt](https://cr-buildbucket.appspot.com/build/8700261916745074641) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_5_5](https://cr-buildbucket.appspot.com/build/8700261917360727425) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
still a draft,
"@hannah-hyj FYI it still says ""draft"" in the title of this PR, if it is indeed no longer a draft.",
cc @ash2moon ,
"Yeah it should be for the subtree, added it to _SemanticsParentData and added a test to check the flag pass from parent to subtree. ",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The new `isA11yFocusable` flag is encoded using bits 31 and 32. For this to be effective on Android, the corresponding flags need to be defined in the `Flag` enum in `flutter/shell/platform/android/io/flutter/view/AccessibilityBridge.java`. It appears these changes are missing from this pull request. Without them, the new accessibility flag will be ignored on Android.",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

There appears to be a syntax error in the `SemanticsConfiguration` class. The closing brace `}` for the `isFocused` setter is misplaced, causing the documentation for `isA11yFocusable` to be inside the `isFocused` setter, which will result in a compilation error. I've suggested a fix to correct the structure.

```dart
  set isFocused(bool? value) {
    _flags = _flags.copyWith(isFocused: _tristateFromBoolOrNull(value));
    _hasBeenAnnotated = true;
  }

  /// Whether the owning [RenderObject] can hold the a11y focus (different from input focus).
  bool? get isA11yFocusable => _flags.isA11yFocusable.toBoolOrNull();
  set isA11yFocusable(bool? value) {
    _flags = _flags.copyWith(isA11yFocusable: _tristateFromBoolOrNull(value));
    _hasBeenAnnotated = true;
  }
```",
our style guide suggest avoid abbreviation. we should use the full name isAccessibilityFocusable,
"keep in mind this in turn sets the isAccessibilityElement to NO, which will completely shut down everything a11y related in this node. A more appropriate one may be 
https://developer.apple.com/documentation/objectivec/nsobject-swift.class/accessibilityrespondstouserinteraction?language=objc",
"
```suggestion
  /// If non-null, whether the subtree can be focused by accessibility services.
```",
done,
"We can enforce this in the framework side. Since we just added this feature, we should do it now. probably in _semanticsGeneral check",
we should gives this a more appropriate name like isSubTreeAccessibilityFocusable. we need to differenatiate this and the SemanticsNode.isAccessibilityFocusable where it only applies to SemanticsNode but not its children and will be handled as such in Engine.,
and its subtree,
added,
renamed,
"This will also throw if data.flagsCollection.isFocused == Tristate.isFalse and   data.flagsCollection.isAccessibilityFocusable == Tristate.isFalse

but it is totally reasonable they are both false.",
we should add a test in flutter/packages/flutter/test/widgets/semantics_role_checks_test.dart,
some where in the doc should mention the behavior when this is false but somewhere in the subtree set this to true. Will that part of the subtree because focusable or it will get override by the parent.,
"This means the child can override parent's behavior. 

for example

```dart
Semantics(
   isSubTreeAccessibilityFocusable: false,
   child: Semantics(
      isSubTreeAccessibilityFocusable: true,
      child: Text('text'),
   )

)
```

the text will still be focusable. I IMO parent false should take priority similar to ignore pointer (which is the opposite that true take priority)

any reason we don't want this behavior?",
"If we make unfocusable always taking priority, not parent or child take priority,  just like for ignore pointer `true` always takes priority. i think the flag should be named to something like `blockSubTreeAccessibilityFocus`?  and it should be a bool, not a tristate flag. 

In my opinion 
```
Semantics(
   isSubTreeAccessibilityFocusable: false,
   child: Semantics(
      isSubTreeAccessibilityFocusable: true,
      child: Text('text'),
   )
)
```
reads like something child should take the priority, why else would the child explicitly set isSubTreeAccessibilityFocusable to `true`? 
 
In the end it's about what we want,  do we just want to explicitly set unfocusable or do we also want to explicitly set a subtree to focusable?








 


",
"i think if data.flagsCollection.isFocused == Tristate.isFalse, it implies that this node *is* keyboard focusable, but is just not focused right now. 

in this case it shouldn't be isAccessibilityFocusable == Tristate.isFalse

this should throw

",
"One of a use case I hope can be solved is to fix the live region in a route that gets covered by a dialog route. We will have to change ModalRoute to not use BlockSemantics, but use this to hide the accessibility focus to the previous route instead.

If we go with the approach that child take priority we may need to come up with a different solution for that use case.",
"oh ok, yeah I forgot the false on these two means different things. LGTM with the logic.",
"@gaganyadav80 thanks for contributing. If you plan to raise the PRs in parts, you can use `part of #35064` instead of the `fixes` keyword, since fixes would close the issue.",
"FYI, you have some test failures in the CI checks.

<details>
<summary>Example error...</summary>

https://logs.chromium.org/logs/flutter/buildbucket/cr-buildbucket/8706578329954034593/+/u/run_test.dart_for_framework_tests_shard_and_subshard_libraries/stdout

```
/b/s/w/ir/x/w/flutter/packages/flutter/test/rendering/editable_intrinsics_test.dart: editable intrinsics [E]
  Expected: normalized value matches
            'RenderEditable#00000 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE DETACHED\n'
              ' │ parentData: MISSING\n'
              ' │ constraints: MISSING\n'
              ' │ size: MISSING\n'
              ' │ cursorColor: null\n'
              ' │ showCursor: ValueNotifier<bool>#00000(false)\n'
              ' │ maxLines: 1\n'
              ' │ minLines: null\n'
              ' │ selectionColor: null\n'
              ' │ locale: ja_JP\n'
              ' │ selection: null\n'
              ' │ offset: _FixedViewportOffset#00000(offset: 0.0)\n'
              ' ╘═╦══ text ═══\n'
              '   ║ TextSpan:\n'
              '   ║   inherit: true\n'
              '   ║   size: 10.0\n'
              '   ║   height: 1.0x\n'
              '   ║   ""12345""\n'
              '   ╚═══════════\n'
              ''
    Actual: 'RenderEditable#3da6c NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE DETACHED\n'
              ' │ parentData: MISSING\n'
              ' │ constraints: MISSING\n'
              ' │ size: MISSING\n'
              ' │ cursorColor: null\n'
              ' │ showCursor: ValueNotifier<bool>#6a6d0(false)\n'
              ' │ maxLines: 1.0\n'
              ' │ minLines: null\n'
              ' │ selectionColor: null\n'
              ' │ locale: ja_JP\n'
              ' │ selection: null\n'
              ' │ offset: _FixedViewportOffset#61187(offset: 0.0)\n'
              ' ╘═╦══ text ═══\n'
              '   ║ TextSpan:\n'
              '   ║   inherit: true\n'
              '   ║   size: 10.0\n'
              '   ║   height: 1.0x\n'
              '   ║   ""12345""\n'
              '   ╚═══════════\n'
              ''
     Which: Lines 7 differed, expected: 
            ' │ maxLines: 1'
            but got
            ' │ maxLines: 1.0'
  
  package:matcher                                     expect
  package:flutter_test/src/widget_tester.dart 473:18  expect
  test/rendering/editable_intrinsics_test.dart 28:5   main.<fn>
```

</details>",
"Hello @loic-sharma @dkwingsmt , I wanted to ask if it is alright that I also update the **other** properties (maxLines, minLines, helperMaxLines, and hintMaxLines) to double in this PR.

Because I have already updated `TextField.maxLines` and `Text/SelectableText/DefaultTextStyle.maxLines` in this PR. The number of files will increase but most of these are one line changes. 

I am fine with raising separate PRs if that is preferred. Please let me know.  ",
"I'd say yes, they should be updated in the same way. However I recommend we only work on one field in this PR to settle the details, and mirror the change to others after this PR.",
"@dkwingsmt I updated the `Text`/`SelectableText`/`DefaultTextStyle` as @loic-sharma mentioned, along with the changes in the engine for `ui.ParagraphStyle`. 

The update is comprising 24 files change. Should I push in this PR or in a separate PR?

PS: I appreciate your patience if any of my questions seem overly basic. Please let me know if I should adjust my approach.",
Another question: I see like 80% of changes in this PR are changing int literals to doubles. Are they needed for compiling or just for aesthetic reasons? If it's the latter I would slightly prefer reverting these changes to make the PR cleaner and make subsequent PRs easier for you.,
"Got it - I had assumed using double literals was a convention, but I realise now I was looking at some older code. I’ll go ahead and revert those changes.",
Hi!  @gaganyadav80 Are you able to address the comments above? I think it's pretty close to completion after that and I'm looking forward to it!,
"Hello @dkwingsmt, Yes I will address the comments. I couldn't gather time due to my job. I will finish it at the end of week. I appreciate your patience.",
"No worries, take your time. I just want to be sure it's not buried. (Just FYI if ever you don't feel comfortable working on it in the near term feel free to convert it to a draft.) :) ",
"Hi @dkwingsmt, I have updated the PR to remove the literal changes. But I have not pushed the changes on `Text`/`SelectableText`/`DefaultTextStyle` to update their `maxLines` to double as mentioned by @loic-sharma. Though I have them ready locally.

Let me know if I should push them in this same PR or you would like a new PR :)",
Thanks for your work! Let me take a look now.,
"Given how small this PR is now, I think it no longer makes much sense to split the PR. Can you push the entire change? :) ",
"Yes, I will push the changes before EOD.",
"Hi @dkwingsmt, I’ve pushed the changes, which also required updating `ParagraphStyle` in the Flutter engine. However, I must have done something wrong since all tests are failing.  

From the build logs, it looks like I’ll need to pass `maxLines` (now a double) separately through the `ParagraphBuilder`, similar to how `height` and `fontSize` are handled.  

Before I dig deeper into the code, I’d really appreciate your suggestions.",
"> From the build logs, it looks like I’ll need to pass `maxLines` (now a double) separately through the `ParagraphBuilder`, similar to how `height` and `fontSize` are handled.
> 
> Before I dig deeper into the code, I’d really appreciate your suggestions.

Yes, that's what you need to do.  ParagraphStyle stores an array of int32's that is most of its value encoded.  Max lines is no longer an int32 so it can not longer be stored in there and must be handled like the other double fields, like height.",
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"@dkwingsmt Thanks for the suggestion. I’ll update the PR accordingly. To avoid future confusion about why `maxLines` is an integer in the engine but a double in the framework, would it make sense to add a comment in the framework code explaining this? I can include that if you think it would be helpful.",
"Oh, sorry I thought I had replied to you (probably drafted but never sent out).

> To avoid future confusion about why maxLines is an integer in the engine but a double in the framework, would it make sense to add a comment in the framework code explaining this?

It can be useful, if you can think of a good place to explain it (maybe `Text`?). Not strongly necessary though, since it might be intuitive enough to realize that the engine has to draw full text lines but widgets can crop them by partial lines.",
"@dkwingsmt I see that customer tests are failing because in some packages the base class is extending the super class with max lines property and hence receiving the following `Error: The argument type 'int?' can't be assigned to the parameter type 'double?'`.

[example1](https://github.com/Flutter-Bounty-Hunters/super_editor/blob/main/super_text_layout/lib/src/super_text.dart#L363)
[example2](https://github.com/flutter/packages/blob/main/packages/rfw/lib/src/flutter/core_widgets.dart#L664)

I think using `num` instead of `double` would be ideal.",
"Yeah, that's unfortunate. Can you try if it builds with `num`? ",
This will be updated in a subsequent PR,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

Using `ceil()` here seems inconsistent with other parts of this PR where `floor()` is used to convert the new `double? maxLines` to an `int?` when needed (e.g., for `hintMaxLines` in `TextField` or for the `minLines` default in `RenderEditable`).

Using `ceil()` could lead to unexpected layout jumps. For instance, if `widget.maxLines` is `2.1`, the placeholder will be allocated 3 lines. However, when the user starts typing, the field will be sized for 2.1 lines, causing a change in height.

To ensure consistent behavior and prevent layout issues, it would be better to use `floor()` here, similar to how it's used in `material/text_field.dart`.

```
                      maxLines: (hasText ? 1 : widget.maxLines)?.floor(),
```",
I have not updated the maxLines property for `Text/SelectableText/DefaultTextStyle` hence we need to convert them to double before passing to the `EditableText`,
`hintMaxLines` will be update to double in a subsequent PR,
"Same here, `minLines` will be updated in other PR",
"Same, will update in other PR",
"From my understanding, this feature doesn't work as expected until at least `Text` is updated. If so, I'd prefer we don't land this in a in-between state. How much bigger is this PR if you also update `Text`/`SelectableText`/`DefaultTextStyle` in this PR?",
"When I tried this code in the emulator it was working right though I am not sure about the exact working/rendering of `Text` widget. There was no overflow error even though `TextField` was using `1.5` as maxLines and `Text` had maxLines as `2` (due to the usage of `ceil`).

I tried to update the Text `maxLines` to double but it also required me to make changes to the `engine/src/flutter/lib/ui/text.dart`. I am not sure about the working or implementation of the engine. I can however just update the property to double of the method being used. Please correct me if I am wrong or if I need to update the same at other files too (i.e `engine/src/flutter/lib/web_ui/**`).

The usage of `int? maxLines` is in the method `_encodeParagraphStyle()` specifically at `LN 1936`. It would be a great help if you could guide me.

Updating the three classes you mentioned should not be a big change.",
It seems that `setMaxLines` is a `size_t` ([link](https://skia.googlesource.com/skia/+/52130e5c3b34/modules/skparagraph/include/ParagraphStyle.h#103)). This call probably truncates the fraction parts. Should we to a `ceil` here instead?,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This test configuration is being renamed from `stable` to `unstable`. However, this change also updates the Android Virtual Device from API 35 to 36, which reportedly fixes a stability issue. The `unstable` naming seems counter-intuitive. If the new configuration is indeed stable, consider keeping the original `stable` name. If it is being marked as `unstable` for monitoring purposes, adding a comment to clarify this would improve maintainability.

```yaml
  linux_android_emu_vulkan_stable:
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This target name has been updated to `unstable`. For consistency, if the platform property is renamed back to `stable` as suggested in the other comment, this should also be updated.

```yaml
  - name: Linux_android_emu_vulkan_stable android_engine_vulkan_tests
```",
"Golden file changes have been found for this pull request. Click [here to view and triage](https://flutter-gold.skia.org/cl/github/166019) (e.g. because this is an intentional change).

If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review.



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #166019 at sha fff33b99ef964731bec764f888891a63037dd1d0_

",
"Golden failure is worrying. This blendMode will cause the navbar to disappear if it not above anything that can be recognized as not transparent, if the blur is applied. Making sure the page the navbar is on has at least a CupertinoPageScaffold is enough to make it appear. I don't know if it is reasonable to assume that floating navbars over literally nothing will never happen. I also don't know if there would be cases were if the navbar is in say a stack above the content with a transparent widget directly below it if it will disappear. Or a similar bug that I'm not thinking about.",
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"Hey @MitchellGoodwin! Greetings from PR triage! 👋 
Is this a change you still would like to make?",
"Greetings from stale PR triage (again)! 👋 
Is this change still on your radar?",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This new property `cacheExtentStyle` should be covered by tests. The PR checklist indicates that no new tests have been added. Please add tests to verify that this property is correctly passed to the `RenderTwoDimensionalViewport` and that changing its value correctly marks the render object for layout.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The documentation for `TwoDimensionalViewport` includes an example of how to create a subclass. This example should be updated to include the new `cacheExtentStyle` property in its constructor, `createRenderObject`, and `updateRenderObject` methods to keep the documentation consistent with the API.",
"> Flags that have no real need to be set statically in production apps (like --trace-skia) are now only settable via the command line.

Was that a requirement?  It seems like there may be a valid case where someone would want to use a 3rd party profiler that launches an app itself, outside of flutters command-line tool.  I don't think perfetto works that way, you have to launch yourself.  RenderDoc works that way for gpu frame debugging.",
"> > Flags that have no real need to be set statically in production apps (like --trace-skia) are now only settable via the command line.
> 
> Was that a requirement? It seems like there may be a valid case where someone would want to use a 3rd party profiler that launches an app itself, outside of flutters command-line tool. I don't think perfetto works that way, you have to launch yourself. RenderDoc works that way for gpu frame debugging.

Oh interesting case....no this isn't a requirement :) We could make all command line flags settable via the manifest. I just assumed that wouldn't be applicable for some flags.",
Looking for feedback on the naming. I know camel case is idiomatic to Android and this is a pretty simple method that does that but I realize that using a conversion method is funky. We could also hard code the manifest names.,
Not 100% sure what the use case was for setting this flag via an `Intent` so need to double check that this refactor works as intended. I assume the call to `flutterEngine.getPlatformViewsController().setSoftwareRendering` is safe after the call to `flutterEngine.getPlatformViewsControllerDelegator().attach` so worst case this can still be set with the command line with the dynamic setting workaround.,
"```suggestion

All manifest metadata keys must be prefixed with the package name `io.flutter.embedding.android` and are suffixed with the camel case of the flag you wish to set.
```",
nit: We typically stick with 80 line columns ( https://github.com/dart-lang/site-shared/blob/main/doc/writing-for-dart-and-flutter-websites.md#semantic-line-breaks ),
"```suggestion
### Examples

Set the `--old-gen-heap-size=` flag to 322 MB:

```xml
```",
We don't enforce it on CI but I like the `markdownlint` vscode plugin for editing markdown files.,
Does this still work?  I would have expected the enforcement to be happening at a different layer.  Now this isn't forwarding any flags to the group.,
"Yea, this is funky, but I think it's fine.",
"Iterating over entries will be more efficient here so you don't have to do another lookup.  `filter()` makes the loops a bit more clear.  I may have got my java syntax a bit wrong, but you get the idea.

```java
for (Map.Entry<K, V> entry : applicationMetaData.entrySet().stream()
        .filter(entry -> !entry.getKey().equals(FLUTTER_EMBEDDING_KEY))) {
}
```",
"I don't think we want to rename these.  There is a lot of documentation online, not all of it that we control that this will conflict with.",
Oh oops...I didn't realize what I was changing here at the time. I'll need to rework this to use my FlutterEngineCommandLines-blah blah flags. Thanks for flagging!,
"Greetings from stale PR triage! 👋 
Is this change still on your radar?",
"> nothing to see here

🫣 

Greetings from stale PR triage! 👋 
Is this change still on your radar?",
"![critical](https://www.gstatic.com/codereviewagent/critical.svg)

The `render` method is now called with `configuration.physicalConstraints.biggest`. This will cause the `RenderView` to always render at its maximum possible size, which can be very inefficient and is likely incorrect, especially for loose constraints. The size passed to `render` should be based on the actual size of the content being rendered. The previous implementation using `configuration.toPhysicalSize(size)` seems more appropriate.

```
      _view.render(scene, size: configuration.toPhysicalSize(size));
```",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

Using `_viewConfiguration.viewConstraints.maxWidth` and `maxHeight` as fallbacks when `size` is null could lead to unexpected behavior and performance issues. If the constraints are loose (e.g., `maxWidth` is very large or infinite), this could cause the view to render at a much larger size than intended. The previous behavior of falling back to `physicalSize` seems safer as it uses the last known size. Consider reverting to the previous logic or using a more conservative fallback.

```
      size?.width ?? physicalSize.width,
      size?.height ?? physicalSize.height,
```",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

The logic to determine view constraints from Auto Layout in `updateAutoResizeConstraints` is incomplete. It only considers `NSLayoutRelationLessThanOrEqual` and `NSLayoutRelationEqual` for width and height constraints set directly on the view. It does not handle other cases like `NSLayoutRelationGreaterThanOrEqual`, constraints relative to other views, or different constraint priorities. This could lead to incorrect constraints being passed to the Flutter engine and result in improper layout.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This assertion was commented out, which removes a check that ensures the layout size satisfies the given constraints. If this change is intentional, it should be accompanied by a comment explaining why the assertion is no longer needed. Otherwise, it should be restored to prevent potential layout issues.

```
      assert(configuration.logicalConstraints.isSatisfiedBy(size));
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The new parameters `minWidth`, `maxWidth`, `minHeight`, and `maxHeight` are untyped. For better code clarity and type safety, they should be explicitly typed as `double`.[^1]

```
  double minWidth,
  double maxWidth,
  double minHeight,
  double maxHeight,
```

#### Style Guide References
[^1]: The Flutter style guide references 'Effective Dart: Style', which recommends using type annotations to improve code readability and safety. [(link)](https://github.com/flutter/flutter/blob/master/.gemini/styleguide.md?plain=1#L58-L58)",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

These new helper methods `_computeMinConstraintValue` and `_computeMaxConstraintValue` do not appear to be used anywhere in the pull request. If they are not needed, they should be removed to avoid dead code.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This `print` statement appears to be for debugging purposes and should be removed before merging.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This large block of code adds an ""Auto Layout Constraint Debugger"". While this is useful for debugging, it adds significant code that doesn't seem intended for production. This should be removed or guarded by a debug-only preprocessor flag.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This call to `printAllConstraints` seems to be for debugging and should be removed.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This `NSLog` call is for debugging and should be removed before merging.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This `print` statement appears to be for debugging and should be removed.",
i didnt ask,
missing one minor bit of fidelity. if you are scrolled down and fling to the top it should spring at the top instead of slam to a halt,
The physics when scrolling to the top is definitely not there yet. It either stops suddenly or bounces when it shouldn't when the drag to dismiss happens. I opened this draft PR to get some feedback on the overall approach.,
"Since this is changed to define an inline function, is the `else` necessary?",
Can you simplify the logic to de-dupe and call on your new wrapper method based on `useNestedNavigation`?,
Why is this needed over using NeverScrollableScrollPhysics?,
I didn't want to set `allowImplicitScrolling` to false.,
"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

View this [failed invocation](https://github.com/flutter/flutter/pull/175303/checks?check_run_id=50289417870) of the CLA check for more information.

For the most up to date status, view the checks section at the bottom of the pull request.",
"An existing Git SHA, `8fc001b3c17b7351eec96c2592910ce4eb9d1a4b`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
"An existing Git SHA, `8fc001b3c17b7351eec96c2592910ce4eb9d1a4b`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
"> I'm not sure that this is something we want, or at least that this is the approach we want. This is a pretty engineered change for a specific case. The title of a route is generally not something that is considered to change while open very often, similar to how the url of the web page you're on isn't expected to change without you redirecting. Having the previousPageTitle change depending on state from the previous page can make some amount of sense, but I don't think we want that to be done this way. It might be better done through state management set up by the app developer. I don't know if we want to open that can of worms. There's a lot of edge cases that I'm not sure we want to take on, like the page title updating mid page transition, it updating while off screen, etc.

thanks, it make sense . i am leaving from it",
"> It might be better done through state management set up by the app developer.

@MitchellGoodwin That's the problem. I've tried to do it in go_router and came to a conclusion that you simply cant. Not without a proper support from the framework. Once page object goes to router it's no longer changes and you cant use state management because pages/routes are not widgets.

I ask you to reconsider, since this is not possible to to from userland currently.

See #175129 for a use case. (Update title when data arrives). Another use case is localization change, so your back button will update for a new language while you're still in a settings page.

As a side note
> similar to how the url of the web page you're on isn't expected to change without you redirecting

That is not universally true for search forms. It is expected that url changes while you type, so hard reload wont reset your query, same with tags selection and chips that have query parameter equivalent. You're staying on same page, changing your filters and URL updates accordingly without redirecting to any new destination.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The listener management for `titleListenable` can be simplified for better readability and robustness. Instead of using a nullable `VoidCallback? _titleListener` field, you can define a private method to handle title changes. This method can then be directly passed to `addListener` and `removeListener`, avoiding the need for a nullable field, null checks, and force unwraps.

```dart
  }) {
    assert(opaque);
    titleListenable.addListener(_handleTitleChanged);
  }

  @override
  DelegatedTransitionBuilder? get delegatedTransition =>
      CupertinoPageTransition.delegatedTransition;

  /// Builds the primary contents of the route.
  final WidgetBuilder builder;

  @override
  Widget buildContent(BuildContext context) => builder(context);

  /// The dynamic title for this route.
  ///
  /// When the value of this [ValueListenable] changes, neighboring routes
  /// will be notified to update their references to this route's title.
  final ValueListenable<String?> titleListenable;

  @override
  String? get title => titleListenable.value;

  @override
  final bool maintainState;

  @override
  String get debugLabel => '${super.debugLabel}(${settings.name})';

  void _handleTitleChanged() {
    // Notify neighboring routes when title changes
    changedInternalState(notifyNeighbors: true);
  }

  @override
  void dispose() {
    titleListenable.removeListener(_handleTitleChanged);
    super.dispose();
  }
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This test correctly sets up the scenario for dynamic title updates but doesn't verify that the back button's title on the second page actually updates. To make the test more robust, you should add assertions to check for the updated title text in the back button.

```suggestion
      // Verify initial state
      final Finder backButton = find.byType(CupertinoNavigationBarBackButton);
      expect(backButton, findsOneWidget);
      expect(find.descendant(of: backButton, matching: find.text('First Page')), findsOneWidget);
      expect(find.text('Second Page'), findsOneWidget);

      // Update first route title
      firstTitleNotifier.value = 'Updated First Page';
      await tester.pump();

      // The second route should now show the updated first page title in its back button.
      expect(find.descendant(of: backButton, matching: find.text('Updated First Page')), findsOneWidget);
      expect(find.descendant(of: backButton, matching: find.text('First Page')), findsNothing);
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This test case, `'works with CupertinoNavigationBar'`, appears to be redundant as it has nearly identical logic to the `'updates title dynamically'` test case. To improve test suite maintainability and reduce duplication, consider removing this test.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The test `'notifies neighboring routes when called with notifyNeighbors=true'` only verifies the scenario where the route has no neighbors. To ensure the feature is fully tested, consider adding another test case where the route has both a previous and a next route, and assert that `didChangePrevious` and `didChangeNext` are called on the respective neighbors.",
This is a pretty big change to the core navigator behavior that I'm not sure we want to change for this specific case.,
"Looks like we can also identify hovering, I will work on this next",
"Dont know why mac and linux ci fails, but my changes doesnt break any windows test so it looks good. Now i need to add my own tests",
Hey @CodeDoctorDE welcome! Thanks for contributing! It looks like this never entered the review queue since it was marked a draft. Is this still something you would like to work on?,
"Hello, oh yeah, but it currently has some problems I need to fix",
"Hello again @CodeDoctorDE, this came back around to stale PR triage. :)
Still have plans to work on this?",
"Hello,
Yeah, Im happy to work again here, but in the current time, I hadn't enough time because of studying. I will continue here in a month",
Quite alright! Thanks for letting us know. I am going to close this for now to remove it from our review queue and CI tasks. Feel free to reopen when you are ready to return to it. Thanks!,
"Hello, I finished my changes but I don't have the option to reopen it.
Can you reopen it or should I make a new one?",
"An existing Git SHA, `7446780b1c60f45e90729911b67d6ad0f7d1ea28`, was detected, and no actions were taken.

To re-trigger presubmits after closing or re-opeing a PR, or pushing a HEAD commit (i.e. with `--force`) that already was pushed before, push a blank commit (`git commit --allow-empty -m ""Trigger Build""`) or rebase to continue.",
"PR can be reviewed, not sure why mac fais",
"> PR can be reviewed, not sure why mac fais

It is passing. Tree status would be green on its own",
Thanks for the wonderful contribution - this is looking really good! I left a question and a nitpick. Please feel free to ping me directly when ready.,
/gemini review,
I'll be on vacation for the next 10 days and won't be able to review. Apologies for the delay!,
"I'm having some issues with my setup and am unable to build the engine on my laptop atm. 

I will get to your comments, @loic-sharma, next week when I'm home!",
@Demohstens please feel free to ping me when this is ready for another review :),
"Should be ready @loic-sharma - I totally forgot to mention you, sorry! 

If someone has a pen with rotation capabilities it'd be great to test that property. The tests don't account for the transformation as they intercept the function before it's sent to the framework and my pen does not support rotation :/",
"Could you confirm that multi-touch gestures like pinching on a trackpad still works after this change?

(This line was added by https://github.com/flutter/engine/pull/27863 for multi-touch support, I'd like to double-check we're not regressing that behavior with this new implementation!)",
"For these non-obvious default values, could you add a comment like `/*argument_name=*/` to make these a little more obvious? For example:

```suggestion
          OnPointerMove(x, y, device_kind, touch_id, rotation, pressure, /* modifiers_state=*/0);
```",
Same comment here for adding param name doc hints :),
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This block for handling pointer messages is quite large and adds significant complexity to the `HandleMessage` method. To improve readability and maintainability, consider extracting this logic into a new private helper method, for example `HandlePointerMessage(UINT const message, WPARAM const wparam, LPARAM const lparam)`.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The `device_kind` variable is initialized to `kFlutterPointerDeviceKindMouse`, so this `case` is redundant and can be removed for conciseness.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

These lines appear to be for debugging and are not used in the test's assertions. They can be removed.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The `message_result` variable is unused. The call to `InjectWindowMessage` can be made without assigning its return value.

```suggestion
  win32window.InjectWindowMessage(WM_POINTERDOWN, wparam, lparam);
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

To improve readability and avoid magic numbers, consider defining `1024` as a named constant, for example `kMaxPenPressure`, at the top of the file. This aligns with the Google C++ Style Guide's preference for constants over magic numbers.[^1]

```suggestion
    event.pressure_max = 1024;  // Using a named constant like kMaxPenPressure would be even better.
```

#### Style Guide References
[^1]: The Google C++ Style Guide, which this repository follows, recommends using named constants instead of magic numbers to improve code readability and maintainability. [(link)](https://github.com/flutter/flutter/blob/master/.gemini/styleguide.md?plain=1#L32-L32)",
I prefer as-is for better readability.,
"Personally, I think this is fine as-is. If you want to split this up, I'd consider adding a `ToPointerDataKind` helper function for mapping from win32 pointer input types to Flutter's pointer device kinds.",
Should we include `PT_TOUCHPAD` to `kFlutterPointerDeviceKindTrackpad`?,
Ah this is good feedback! Could you add a `kMaxPenPressure` constant with link to the relevant docs: https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-pointer_pen_info,
"Do we need to divide this by 359 here? If we do, please introduce a `kMaxPenRotation` constant.",
Removing this line disables WM_GESTURE & WM_TOUCH messages. The first is not handled and the latter is replaced by the new implementation so this _should_ not impact the trackpad at all. Local tests seem to confirm this but i'm not entirely confident they cover all cases. This might have been necessary for supporting windows 7 and older as WM_POINTER* were not supported before that. ,
"Good question - from the docs it seems we have to convert to radians here.  
```suggestion
  event.rotation = (double)state->rotation * (M_PI / 180);
``` 
Would this be sufficient here?",
"Ah gotcha, thanks for the details!

cc @jnschulze in case you have any concerns since you added this back in: https://github.com/flutter/engine/pull/27863",
"Ah yup, looks like this is radians: https://api.flutter.dev/flutter/dart-ui/PointerData/rotation.html

That looks good to me, thanks!",
"Please use snake case for variable names, like `x_pos`, `pointer_id`, or `pointer_info`.",
Should we reset these values in `OnPointerUp`?,
"The Canadian locale might not be the best one for the user, I'd let Microsoft's docs redirect :)

```suggestion
// https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-pointer_pen_info
```",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
@loic-sharma could you review this updated PR ?,
"@loic-peron-inetum-public Thanks for the pull request!

I'm a little concerned that this change might regress Flutter Windows's accessibility support in unexpected ways as a similar change to add UI Automation had caused unexpected problems.

Could you include details on how you verified this change? What scenarios did you test?",
"Regarding how we use and tests this proposal:

We are building an application targeting iOS and Windows. We automate black-box tests using Appium on both platform. We use a [custom build of the flutter engine for Windows that includes the required PR to get Semantics::identifer to be exposed as AutomationId](https://github.com/inetum/flutter-engine-windows-automationid). The application is not evaluated on its accessibility for actual users.

Regarding UI Automation-related regressions:

I understand that switching to UI Automation required a full switch in the accessibility interface exposed by Flutter. It seems that IAccessibleEx is a way to extend IAccessible-based exposition with the additional capabilities offered by UI Automation, without jeopardizing existing baheviours.

What are the unexpected ways that triggered unexpected problems and regressed Flutter accessibility support during a previous attempt to switch to UI Automation ? How can I check them ?",
"> What are the unexpected ways that triggered unexpected problems and regressed Flutter accessibility support during a previous attempt to switch to UI Automation ? How can I check them ?

I would manually check that a sample Flutter Windows app still works well with JAWS, NVDA, and Windows Narrator. I'd make sure that as you tab around, the screen reader properly announces content, without any differences compared to today's implementation.

----

Could we de-risk this by making the `IAccessibleEx` implementation opt-in at runtime?

Flutter Windows's API has a `DartProject` that lets you configure your Flutter app. For example, you can configure which threads the apps uses (see [this](https://github.com/flutter/flutter/blob/ceaac22da1a1558eb623d95ba81afd7aa349d9e0/engine/src/flutter/shell/platform/windows/client_wrapper/include/flutter/dart_project.h#L104-L107) and [this](https://github.com/flutter/flutter/blob/ceaac22da1a1558eb623d95ba81afd7aa349d9e0/engine/src/flutter/shell/platform/windows/client_wrapper/include/flutter/dart_project.h#L23-L32)).

Could we update `QueryService` to only return an `IAccessibleEx` interface if the Flutter app turned on the `IAccessibleEx` feature?

Here's what this API might look like:

```cpp
// Configures the accessibility implementation used by Flutter.
enum class AccessibilityMode {
  // Default value. Flutter will automatically select the best available
  // implementation.
  Default,
  // Use the IAccessible implementation.
  IAccessible,
  // Use the experimental IAccessibleEx implementation.
  IAccessibleEx,
};

class DartProject {
  // Sets the accessibility implementation used by Flutter.
  void set_accessibility_mode(AccessibilityMode accessibility_mode) {
    accessibility_mode_ = accessibility_mode;
  }
}
```

To opt-in to the `IAccessibilityEx` implementation, the app developer would need to modify their `windows/runner/main.cpp` file:

```cpp
flutter::DartProject project(L""data"");
project.set_accessibility_mode(flutter::AccessibilityMode::IAccessibleEx);
```

Then, `QueryService` would only return an `IAccessibleEx` interface if the app opted-in to `AccessibilityMode::IAccessibleEx`. What do you think of this approach?",
Note to self: these docs are an excellent resource to review this PR: https://learn.microsoft.com/en-us/windows/win32/winauto/implementing-iaccessibleex-for-providers,
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

The `result` variable is used as an out-parameter for `RelativeToGlobalBounds` but it is not initialized. This can lead to undefined behavior if the function doesn't set it under some path. It's safer to initialize it to a default value.

```suggestion
  bool result = false;
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There are a few minor issues in this sentence that affect clarity and correctness:

*   It should refer to `IAccessibleEx` instead of `IAccessible` when talking about the extension.
*   There's a typo: `accessbility` should be `accessibility`.
*   A space is missing between `AutomationId` and `accessibility`.

Here is a suggested correction:

```suggestion
As switching from MSAA to UI Automation is a major task, MSAA has been extended with the `IAccessibleEx` interface which exposes the UI Automation new capabilities in MSAA-based implementations. In the Flutter engine, `AXPlatformNodeWin` implements `IAccessibleEx`, for example to get `AutomationId` accessibility property from Flutter `SemanticsNode::identifier`.
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The example path `~/Projects/flutter` is specific to a particular user's setup. To make the documentation more general and avoid potential confusion for users with different directory structures, it's better to remove this specific example.

```suggestion
Before building the engine, ensure your dependencies are up to date by running the following command from the root of your Flutter checkout:
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

To better illustrate the power of filtering, consider adding an example that combines multiple filters, such as browser and renderer. This would help users understand how to run a more specific set of tests.

```markdown
**Examples:**

Run all test suites:

```bash
felt test
```

Run a specific test file:

```bash
felt test test/engine/util_test.dart
```

Run tests that use the `dart2wasm` compiler:

```bash
felt test --compiler dart2wasm
```

Run tests on Chrome using the CanvasKit renderer:

```bash
felt test --browser chrome --renderer canvaskit
```",
Done.,
Done.,
Were one of these newlines meant to be on the previous line?,
curious if `xcode -> clean build folder` works? i usually launch from xcode. ,
"@Piinks Glad to help! And for sure, checking these now actually. Thanks for the attention to these PRs!",
Lints fixed 👍🏻,
"This pull request executed golden file tests, but it has not been updated in a while (20+ days). Test results from Gold expire after as many days, so this pull request will need to be updated with a fresh commit in order to get results from Gold.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
Hey @lukemmtt do you have plans to return to this change?,
"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
"@Piinks Thanks for the follow-up, and yes—happy to revisit this one!

I've just done some edits, seems to be passing now locally, but I'll keep an eye on the CI checks in case my environment isn't set up perfectly.",
"It looks like the failure was resolved, thank you!
Can you rebase with the tip of tree to resolve the conflicts? I think we are ready to get this in! 🎊 ",
"@Piinks Should be good now, let me know, thank you!",
"The google testing failures appear unrelated, rebasing to kick off another run.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This check is a bit brittle as it relies on a specific 'magic' value (`Y=108`) that the item jumps to when the bug is present. A more robust approach would be to assert that the item's position does not jump significantly when the animation is interrupted. This can be done by checking its position just before and just after the interruption.

This makes the test more resilient to future changes and more clearly expresses the intended behavior (i.e., no animation jumps).

```
    // Get position just before the animation is interrupted.
    final double item1YBeforeInterrupt = tester.getCenter(find.text('item 1')).dy;

    // Start dragging back - we'll check right after crossing the threshold
    // Drag back just past the threshold (to 45px) to trigger the swap back
    await drag.moveBy(const Offset(0, -10));
    await tester.pump(const Duration(milliseconds: 50));
    
    // Check for animation jumping immediately after crossing the threshold
    final double item1YAfterInterrupt = tester.getCenter(find.text('item 1')).dy;
    
    // The position should not have jumped. It should be very close to where it was,
    // just starting to animate in the other direction. A small tolerance accounts
    // for the 50ms of the new animation.
    expect(item1YAfterInterrupt, closeTo(item1YBeforeInterrupt, 5.0), reason: 'Animation jumping detected!');
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This loop appears to be for manually observing the animation and is redundant since `tester.pumpAndSettle()` is called immediately after. `pumpAndSettle` will advance the clock until all animations are complete. You can safely remove this loop to make the test slightly faster and more concise.",
It looks like this is currently failing.,
"Yes, I am not sure why we pump out the rest of the animation like this, unless we are testing for something?",
"Should be resolved now, I think",
"Thanks for the feedback—nope, this was just a remnant from when I was evaluating the test visually as an integration test. Removed now 👍🏻",
Fixed; now using relative position comparison with `closeTo` matcher as suggested. Test properly detects the bug and is more robust.,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
Nit: I'm wondering if there is a better name here because I expected this to be an instance of NavigatorState or something. _isInstalledIn?,
"""presents"" => ""presence""",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177398, because - The status or check suite [Linux flutter_plugins](https://cr-buildbucket.appspot.com/build/8700289986141768097) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177398, because - The status or check suite [Mac tool_integration_tests_3_5](https://cr-buildbucket.appspot.com/build/8700289984741157313) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Linux flutter_plugins](https://cr-buildbucket.appspot.com/build/8700289986141768097) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

View this [failed invocation](https://github.com/flutter/flutter/pull/177019/checks?check_run_id=52730830986) of the CLA check for more information.

For the most up to date status, view the checks section at the bottom of the pull request.",
"idgf, they didn't worked before me ",
"fair enough, updated ",
"autosubmit label was removed for flutter/flutter/177019, because - The status or check suite [Mac_arm64 build_tests_2_4](https://cr-buildbucket.appspot.com/build/8701014465427884833) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [cla/google](https://cla.developers.google.com/about) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Hi @cuteUtya can you sign the [cla](https://cla.developers.google.com/about)?,
"@victorsanni ✅

<img width=""741"" height=""224"" alt=""Screenshot 2025-10-16 at 00 20 13"" src=""https://github.com/user-attachments/assets/baf83547-2ed6-4abe-bb7b-4fa4758ed3c8"" />

",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This error message seems to be a copy-paste error from the Linux implementation. It should refer to 'Windows' or 'Win32' instead of 'Linux'.

```dart
    throw UnimplementedError('Tooltip windows are not yet implemented on Windows.');
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There's a typo here. 'the a' should probably be 'it'.

```dart
without cluttering the main interface. As such, it may not receive input
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

For consistency with other methods in `_WindowingOwnerUnsupported`, this should throw an `UnsupportedError` with the `errorMessage` instead of an `UnimplementedError`. This will provide a more consistent and informative error message when windowing is not supported.

```dart
  TooltipWindowController createTooltipWindowController({
    required TooltipWindowControllerDelegate delegate,
    required BoxConstraints preferredConstraints,
    required Rect anchorRect,
    required WindowPositioner positioner,
    required BaseWindowController parent,
  }) {
    throw UnsupportedError(errorMessage);
  }
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

It looks like some documentation comments were copied from `DialogWindow` and not updated for `TooltipWindow`. The description should refer to creating a 'tooltip window' and destroying it with `TooltipWindowController.destroy`.

```dart
  /// Creates a tooltip window widget.
  ///
  /// The [controller] creates the native backing window into which the
  /// [child] widget is rendered.
  ///
  /// It is up to the caller to destroy the window by calling
  /// [TooltipWindowController.destroy] when the window is no longer needed.
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The calculation for the initial `result` offset is repeated three times within this method (for default placement, sliding, and resizing). To improve maintainability and reduce redundancy, you could calculate it once at the beginning of the `placeWindow` method and reuse the value.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

There are several instances of multiplication by `-1.0`. This can be simplified by using the unary minus operator (`-`) for better readability and conciseness.

```suggestion
      case WindowPositionerAnchor.bottom:
        return Offset(-size.width / 2.0, -size.height);
      case WindowPositionerAnchor.left:
        return Offset(0.0, -size.height / 2.0);
      case WindowPositionerAnchor.right:
        return Offset(-size.width, -size.height / 2.0);
      case WindowPositionerAnchor.topLeft:
        return Offset.zero;
      case WindowPositionerAnchor.bottomLeft:
        return Offset(0.0, -size.height);
      case WindowPositionerAnchor.topRight:
        return Offset(-size.width, 0.0);
      case WindowPositionerAnchor.bottomRight:
        return Offset(-size.width, -size.height);
    }
```",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177400, because - The status or check suite [Linux android_java17_tool_integration_tests](https://cr-buildbucket.appspot.com/build/8700285017357054961) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

The current implementation with nested `AnimatedBuilder`s has a potential issue. The `child` property of an `AnimatedBuilder` is meant for parts of the widget tree that do not depend on the animation. However, the inner `AnimatedBuilder`'s `child` is a `FractionalTranslation` that depends on `primaryTranslationAnimation`, which is derived from `widget.animation`. The inner `AnimatedBuilder` listens to `widget.secondaryAnimation`. When only `widget.secondaryAnimation` ticks, the inner builder will be called with a stale value of `primaryTranslationAnimation`.

While this might not cause issues if both animations are always driven together, it's incorrect usage and can lead to subtle bugs.

I suggest refactoring to use a single `AnimatedBuilder` that listens to both animations using `Listenable.merge`. This simplifies the code and ensures that all animation-dependent values are always up-to-date.

```dart
return AnimatedBuilder(
  animation: Listenable.merge(<Listenable>[widget.animation, widget.secondaryAnimation]),
  builder: (BuildContext context, _) {
    return ColoredBox(
      // TODO(kishan): Replace with framework color.
      color: const Color(0xFF000000).withOpacity(opacityAnimation.value),
      child: Align(
        alignment: Alignment.bottomLeft,
        child: ClipRect(
          child: SizedBox(
            height: clipAnimation.value,
            child: OverflowBox(
              alignment: Alignment.bottomLeft,
              maxHeight: size.height,
              child: FractionalTranslation(
                translation: secondaryTranslationAnimation.value,
                child: FractionalTranslation(
                  translation: primaryTranslationAnimation.value,
                  child: widget.child,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  },
);
```",
"Can you define this color as a private constant member of the `StatefulWidget` class with its name as its function (i.e background color, scrim color etc, whichever is applicable).",
+1 if doable,
"Sure, I will update.",
"autosubmit label was removed for flutter/flutter/177355, because - The status or check suite [Google testing](http://go/frob_pr/177355) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
 Just going to merge this myself. The google testing failures are unrelated.,
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The pre-launch checklist in the pull request description has an unchecked item: `[ ] I listed at least one issue that this PR fixes in the description above.`. The repository style guide states that all steps in the checklist should be completed.[^1] For trivial changes like this that may not fix a tracked issue, it's good practice to either check the box and note that no issue is fixed, or mark it as not applicable (e.g., `N/A`).

#### Style Guide References
[^1]: The style guide requires that all steps in the Pre-launch Checklist from the PR template are completed.",
" @LongCatIsLooong please fill out the PR description above, afterwards the release team will review this request.",
"This pull request was opened from and to a release candidate branch. This should only be done as part of the official [Flutter release process](https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md). If you are attempting to make a regular contribution to the Flutter project, please close this PR and follow the instructions at [Tree Hygiene](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md) for detailed instructions on contributing to Flutter.

__Reviewers__: Use caution before merging pull requests to release branches. Ensure the proper procedure has been followed.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

While this fixes the crash for `NSAttributedString`, the code is still potentially unsafe if the `string` object is of a type other than `NSString` or `NSAttributedString`. The `string` parameter is of type `id`, and if it's some other type that doesn't respond to `UTF8String` (e.g., `NSNumber`), it will crash. It would be more robust to explicitly check for `NSString` as well to prevent this potential crash.

```suggestion
  const NSString* rawString = isAttributedString ? [string string] : ([string isKindOfClass:[NSString class]] ? (NSString*)string : nil);
  std::string utf8String = rawString ? [rawString UTF8String] : """";
```",
@reidbaker ,
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This method has a few issues that should be addressed:

1.  **Unused Parameter**: The `canvas` parameter is not used and can be removed from the method signature and call site in `paint()`.
2.  **Inefficiency**: The same `RSuperellipse` path is created three times. It would be more efficient to create it once and reuse it.
3.  **Potential Visual Artifacts**: The current approach of splitting the shape into a top half and a bottom half using clipping rectangles is likely to create a visible seam on the left and right sides of the border when it's stroked. A more robust solution would be to construct a single, continuous path for the gapped border, similar to how `OutlineInputBorder._gapBorderPath` is implemented. This would avoid any seams.

Consider refactoring this method to address these points for better performance and rendering quality.",
cc @chunhtai Assigning you for the review because the change is similar to https://github.com/flutter/flutter/pull/175810 that you reviewed recently.,
"@chunhtai Are there any visual diffs in the Google testing failures? Or are those failures related to tests looking up widgets by type?
My bet it is the second case. Those tests will have to be updated similarly to the flutter gallery test updated in this PR where `find.byType(TextButton)` returns more widgets now as widgets created by `TextButton.icon` are now included in the result and were not before this PR.",
"I saw a button that was previous disabled but becomes enabled, maybe some of the enabling or onpress callback is not wire up correctly?",
"before 
<img width=""345"" height=""155"" alt=""image"" src=""https://github.com/user-attachments/assets/172e239b-37f3-4eab-b10e-2892b8154dfb"" />
after
<img width=""277"" height=""99"" alt=""image"" src=""https://github.com/user-attachments/assets/2085fe84-ff13-47b3-b24c-4e573d3cba91"" />
",
"This is their code, are we overriding the disable style somehow?

```dart
final style =
        buttonStyle ??
        TextButton.styleFrom(
          foregroundColor: theme.colors.primary,
          disabledForegroundColor: theme.colors.onSurfaceVariant,
          iconColor: theme.colors.primary,
          disabledIconColor: theme.colors.onSurfaceVariant,
          textStyle: buttonSize == ButtonSize.medium
              ? theme.textStyles.labelLarge
              : theme.textStyles.bodyMedium,
        );

return TextButton(
              onPressed: onTap != null
                  ? () {
                      onTap!();
                    }
                  : null,
              style: style,
              child: Text(label),
            );
```",
"> This is their code, are we overriding the disable style somehow?

Thanks for providing this code extract :pray: 
I can't reproduce the problem on my side and I don't see what could lead to this change : this PR does not change the default constructor, it mainly changes the `TextButton.icon` implementation and the code extract does not use `TextButton.icon`.
It would be interesting to know how the 'buttonStyle' variable in this code snippet is initialized",
"All checks are green now but this is because the Google testing check did not run automatically after I pushed a new commit.
This new commit sets the default clipBehavior similarly to what was done previously (my goal is to have as little differences as possible compare to before to narrow down the Google testing failure, I don't think this change will help for the Google test failure which was reported).

@Piinks This is a case where the Google testing does not run automatically after a new commit (maybe it will in an indeterminate delay?). The problem here is that someone might jump in and merge this PR, then we will have to revert it later.
",
Filed https://github.com/flutter/flutter/issues/176721 and reached out to the infra team. I will rebase here to try once more.,
"@chunhtai We looked again at the change, the screenshot and the code extract and we have no clue. If you can share more of the code extract we might understand how it can happen.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The refactoring of `TextButton.icon` from a factory to a named constructor makes the associated doc comment on line 104 slightly misleading. The comment states:

```dart
/// If [icon] is null, will create a [TextButton] instead.
```

This was accurate for the factory pattern but is less clear now that `TextButton.icon` is a constructor of `TextButton`. For improved clarity, consider updating it to describe the behavior when `icon` is null, for example:

```dart
/// If [icon] is null, this constructor will create a TextButton
/// that doesn't display an icon.
```

This change would align the documentation with the new implementation and improve the public API's clarity.[^1]

#### Style Guide References
[^1]: ",
Pinging back to the top of my inbox to check on the Google testing results.,
"Following up on Google testing, it looks like this breaks a couple of things in subtle ways that might be hard for developers to diagnose and fix. There is at least one custom scroll position class in the google testing set that looks to have caused some test failures. Separately there are some screen shot tests that show that the scroll position is not the same with this change.
Do you have thoughts on options to make this a non-breaking change?",
@yiiim Hi! Are you able to address the comments above? (From triage),
"> Following up on Google testing, it looks like this breaks a couple of things in subtle ways that might be hard for developers to diagnose and fix. There is at least one custom scroll position class in the google testing set that looks to have caused some test failures. Separately there are some screen shot tests that show that the scroll position is not the same with this change. Do you have thoughts on options to make this a non-breaking change?

Thank you for your feedback. After carefully reviewing the implementation, I couldn't find an alternative approach to achieve the desired functionality without introducing a breaking change. If you have any suggestions or ideas, I would be happy to explore them further.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This switch to using a `switch` statement is a nice modernization of the code. However, the case for `ScrollUpdateNotification` is now more restrictive. The original `value is ScrollUpdateNotification` would match any `ScrollUpdateNotification`, but `case ScrollUpdateNotification(dragDetails: DragUpdateDetails _):` will only match when `dragDetails` is not null. This excludes updates from non-drag activities like ballistic scrolling. Was this intentional? If not, you could use `case ScrollUpdateNotification():` to match all `ScrollUpdateNotification` instances, which would be equivalent to the original logic.

```
        case ScrollUpdateNotification():
```",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This appears to be an empty test case. It should probably be removed to keep the test suite clean.",
"Yes, this is intentional. Since scrolling now triggers a relayout, the `ScrollNotificationObserver` will send an additional `ScrollUpdateNotification` at [this location](https://github.com/flutter/flutter/blob/515e753c6e5575be1a882bd0be6c13a0daa2c006/packages/flutter/lib/src/widgets/scroll_position.dart#L675), with `dragDetails` set to null.",
"Should `applyViewportDimension` also be in the loop? I am looking at comparing this to RenderShrinkWrappingViewport (similar to SingleChildScrollView), which breaks out of the loop when both are return true.

Comparing to RenderViewport I think is a bit different than expected here, which used maxLayoutCycles to break the loop.",
This makes me wonder if this will be a breaking change. Why does a change in SingleChildScrollView affect _TabBarScrollPosition? Will other custom scroll positions be broken?,
"What you said makes a lot of sense. If use `SingleChildScrollView` with a custom `ScrollPosition` and always override `applyContentDimensions` to return `false`, it will indeed result in an infinite loop. However, always returning `false` is probably an incorrect usage of `applyContentDimensions`. According to the documentation, returning `false` will cause it to be called multiple times. I don't think it's possible to prevent this situation with an assertion. Do we have any conventional practices to handle this?",
"It would be hard to try to turn it into a soft break, let me kick off Google testing to see if it uncovers any breaks.",
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"@Jaineel-Mamtora If possible, can you add before/after screenshots to make the review easier?",
"Golden file changes have been found for this pull request. Click [here to view and triage](https://flutter-gold.skia.org/cl/github/173706) (e.g. because this is an intentional change).

If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review.



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173706 at sha b5171187285ad1f625b10912dfd1be0f62853161_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173706).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173706 at sha a301cf56b9c86bf78e99f8eaf079b345f80c4588_

",
"@Jaineel-Mamtora Thanks for your effort. However, the baseline of the text does not fit. Now, the separator is below the text baseline. I think that fixing this issue is not just setting the `stretch` value. 

Also, keep in mind that other languages have other separators, like `.` or `h`. ",
"> @Jaineel-Mamtora Thanks for your effort. However, the baseline of the text does not fit. Now, the separator is below the text baseline. I think that fixing this issue is not just setting the `stretch` value.
> 
> Also, keep in mind that other languages have other separators, like `.` or `h`.

@ManuelRauber, thanks for pointing them out. I'll try to fix the baseline issue.

Further, upon investigating, it seems like the baselines in the Material 3 design [docs](https://m3.material.io/components/time-pickers/specs#f07ad824-7e63-4d86-b5ca-090f1a6a3ded) for the input and the separator are inconsistent (pardon me, if that's not the case). Do we want to make the baseline consistent?

Please check below screenshots for reference:

<img width=""294"" height=""181"" alt=""material_3_time_picker"" src=""https://github.com/user-attachments/assets/cf8cd6da-c0b3-40db-810f-dc5e21017fc7"" /><br />
Fig. 1: Material 3 Time Picker as per [docs](https://m3.material.io/components/time-pickers/specs#f07ad824-7e63-4d86-b5ca-090f1a6a3ded)

<br />

<img width=""294"" height=""265"" alt=""visual_representation_of_consistent_baseline"" src=""https://github.com/user-attachments/assets/50440be3-081f-4031-80fa-093adbeb1b95"" /><br />
Fig. 2: My perception of consistent baseline for Material 3 Time Picker

<br />

Please confirm which one should be considered as consistent.
",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173706).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173706 at sha a11088c1267520c2cf3f189f1a6731faba95f637_

",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173706).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173706 at sha c78da923cfa9b6775fdaf908fd928f22145e2946_

",
"> > @Jaineel-Mamtora Thanks for your effort. However, the baseline of the text does not fit. Now, the separator is below the text baseline. I think that fixing this issue is not just setting the `stretch` value.
> > Also, keep in mind that other languages have other separators, like `.` or `h`.
> 
> @ManuelRauber, thanks for pointing them out. I'll try to fix the baseline issue.
> 
> Further, upon investigating, it seems like the baselines in the Material 3 design [docs](https://m3.material.io/components/time-pickers/specs#f07ad824-7e63-4d86-b5ca-090f1a6a3ded) for the input and the separator are inconsistent (pardon me, if that's not the case). Do we want to make the baseline consistent?
> 
> Please check below screenshots for reference:
> 
> <img alt=""material_3_time_picker"" width=""294"" height=""181"" src=""https://private-user-images.githubusercontent.com/38665793/477674044-cf8cd6da-c0b3-40db-810f-dc5e21017fc7.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTUyNTQ1NzksIm5iZiI6MTc1NTI1NDI3OSwicGF0aCI6Ii8zODY2NTc5My80Nzc2NzQwNDQtY2Y4Y2Q2ZGEtYzBiMy00MGRiLTgxMGYtZGM1ZTIxMDE3ZmM3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA4MTUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwODE1VDEwMzc1OVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTFjZDY3MDc0MmVlMGFhNGFmMjJmYTM5YWExNmU1ZDc2MzJiY2Y1NDNiYTc1MTdmZDcwYzQ0ODhiOWI2NDk0NjcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.FcwagWwl9yZxHd8BH4B8HdQN_F6548YZ-1s2JA2Q58o""> Fig. 1: Material 3 Time Picker as per [docs](https://m3.material.io/components/time-pickers/specs#f07ad824-7e63-4d86-b5ca-090f1a6a3ded)
> 
> 
> <img alt=""visual_representation_of_consistent_baseline"" width=""294"" height=""265"" src=""https://private-user-images.githubusercontent.com/38665793/477674526-50440be3-081f-4031-80fa-093adbeb1b95.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTUyNTQ1NzksIm5iZiI6MTc1NTI1NDI3OSwicGF0aCI6Ii8zODY2NTc5My80Nzc2NzQ1MjYtNTA0NDBiZTMtMDgxZi00MDMxLTgwZmEtMDkzYWRiZWIxYjk1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA4MTUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwODE1VDEwMzc1OVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTI1NDA4ODIxYmQ0NTE4MjYyMTI2MTA2MjhjNmE1ZjgwYWVlN2UyYjJhYTk5ODdiYTc2ZDczODM2Yjg4ZDkyMjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.VRPvJI1TKWVG1V7GjHZEtyf54qXit515ODI0vBde_zU""> Fig. 2: My perception of consistent baseline for Material 3 Time Picker
> 
> 
> Please confirm which one should be considered as consistent.

Indeed, according to the specs, at least in that screenshot, its also off. But since it's off in all of the screenshots, it might just be the intended way.

My personal taste would be figure 2, the real baseline. But since Flutter material should respect the material design docs, it may be better to go for figure 1 instead. ",
"> Indeed, according to the specs, at least in that screenshot, its also off. But since it's off in all of the screenshots, it might just be the intended way.
> 
> My personal taste would be figure 2, the real baseline. But since Flutter material should respect the material design docs, it may be better to go for figure 1 instead.

Got it. Then, I think my current change should suffice. I checked for remaining separators, and the UI is looking consistent for them all. Please find below the screenshot for the separators:

<img src=""https://github.com/user-attachments/assets/e026cc31-cae3-4127-935a-df56f6f9ff0a"" alt=""hour-min '.' separator"" width=""294"" height=""267"">

**Fig 1:** hour-min '.' separator

<img src=""https://github.com/user-attachments/assets/23eced27-fc09-4b23-848d-efc1d88729e7"" alt=""hour-min 'h' separator"" width=""294"" height=""253"">

**Fig 2:** hour-min 'h' separator

<img src=""https://github.com/user-attachments/assets/73ab7d42-5869-4295-9050-342cec0db3ab"" alt=""hour-min ':' separator in 24 hours format"" width=""294"" height=""263"">

**Fig 3:** hour-min ':' separator in 24 hours format

I checked in Android (API-35), macOS, iOS (16 and 16 Pro Max). The UI looks consistent as shown above. Also, all the test cases are passing.",
"This pull request executed golden file tests, but it has not been updated in a while (20+ days). Test results from Gold expire after as many days, so this pull request will need to be updated with a fresh commit in order to get results from Gold.

For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

",
Gentle nudge @MitchellGoodwin (from triage),
"@Jaineel-Mamtora thank you for putting together this PR! Apologies for the late review. The approach looks reasonable, can you resolve the merge conflicts and rebase? The linux analyze check looks unrelated. Once it's all green again, I'm going to run Google testing on this PR just to see the golden file tests for Google apps using Flutter. I suspect that there might be some failures there that might show some odd behavior with real life use cases that we would want to address here. We may want to add some padding to make sure that the stretch doesn't stretch too far.",
"My sincere apologies 🥲. I was trying to merge the upstream changes in my forked branch. But, accidentally rebased it. I am a bit new to contributing to large repositories. Please let me know, in case I have wrongfully made any changes to any part of this codebase.",
"No worries, it happens. And it seems like you fixed it. A lot of the time it's best to make a new PR a new branch with the changes, but that doesn't look necessary here. I removed the extra reviewers that got added. ",
"Golden file changes are available for triage from new commit, Click [here to view](https://flutter-gold.skia.org/cl/github/173706).



For more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md).

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.

_Changes reported for pull request #173706 at sha ce8eb816f8448a7307613f1e2b608c0d788282b7_

",
"@Jaineel-Mamtora change LGTM, but I'm unable to rebase through github, as github says there is a conflict, though I do not see one. Could you try rebasing again? If it continues to act up, it might be easier to create a new branch with the changes, open a new PR, and request my review on that one.",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This change correctly fixes the alignment of the hour and minute labels. To prevent future regressions, please consider adding a test case for this UI fix. A golden test in `packages/flutter/test/material/time_picker_test.dart` that uses a non-English locale (like Korean, as shown in the issue) would be ideal to verify that the labels are correctly centered.",
"Here we see the glorious AI code review, which hallucinates that the example language in the issue is Korean. `Locale('es')` is Spanish 👏",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177060, because - The status or check suite [Mac tool_integration_tests_3_5](https://cr-buildbucket.appspot.com/build/8700922606251037777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177060, because - The status or check suite [Mac tool_integration_tests_5_5](https://cr-buildbucket.appspot.com/build/8700922606078789761) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_4_5](https://cr-buildbucket.appspot.com/build/8700922606251037761) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_3_5](https://cr-buildbucket.appspot.com/build/8700922606251037777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_1_5](https://cr-buildbucket.appspot.com/build/8700922606251037809) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac module_custom_host_app_name_test](https://cr-buildbucket.appspot.com/build/8700922606938124961) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac_arm64 build_tests_2_4](https://cr-buildbucket.appspot.com/build/8700922607112285057) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177060, because - The status or check suite [Mac tool_integration_tests_5_5](https://cr-buildbucket.appspot.com/build/8700922606078789761) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_4_5](https://cr-buildbucket.appspot.com/build/8700922606251037761) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_3_5](https://cr-buildbucket.appspot.com/build/8700922606251037777) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac tool_integration_tests_1_5](https://cr-buildbucket.appspot.com/build/8700922606251037809) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac module_custom_host_app_name_test](https://cr-buildbucket.appspot.com/build/8700922606938124961) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Mac_arm64 build_tests_2_4](https://cr-buildbucket.appspot.com/build/8700922607112285057) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"Hello, could you add some tests? In the mean time I'm converting this to draft. ",
@hellohuanlin I added some tests.,
@LongCatIsLooong could you look into the Google testing failure?,
The test failures don't seem to be related. I re-ran them and in case they don't fix themselves we can override the that CI check.,
"@LongCatIsLooong Could you please update the status?
I'm hoping this PR will be included in the next stable release.",
"I overrode the google testing. This PR needs one more approval to be merged. In case this misses the release cutoff date, feel free to request a cherrypick (the process is automated: https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-Cherrypick-Process.md)",
"autosubmit label was removed for flutter/flutter/176329, because The base commit of the PR is older than 7 days and can not be merged. Please merge the latest changes from the main into this branch and resubmit the PR.",
@vashworth Could you re-run the checks?,
"@p1318k based on the tags on the [commit](https://github.com/flutter/flutter/commit/4119c700acb15ace1b55904a57a9b32e462d4e9a), it looks like it didn't make it into [the latest beta release](https://discord.com/channels/608014603317936148/783492179922124850/1429909905531207721). Could you try out the [automated cherry-pick process](https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-Cherrypick-Process.md) if you're still interested in getting the commit into the stable release? AFAIK you'll have to request a CP to the beta channel, once that's done the next stable release should include this fix too.",
"@LongCatIsLooong , thank you for the reminder. I have added the “CP-stable” prefix to the title as you guided.
Please let me know if there’s anything else I should update.",
"> @LongCatIsLooong , thank you for the reminder. I have added the “CP-stable” prefix to the title as you guided.
> Please let me know if there’s anything else I should update.

I think the ""label"" in the wiki page refers to ""github labels"" not PR titles. IIRC in the GitHub web UI it's close to where you add new PR reviewers.
",
@LongCatIsLooong I don’t seem to have permission to add labels. Could you please add them for me?,
The faq section says anyone can request a cherry pick. Let me check tomorrow.,
"@LongCatIsLooong my previous PR was cherry-picked by a Googler, who then added the 'cp: stable' label to it.
- https://github.com/flutter/flutter/pull/172282#issuecomment-3100263094",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

While the current change correctly handles `NSAttributedString`, there's a potential crash if the input `string` is `nil`. If `string` is `nil`, `rawString` will also be `nil`. Calling `[nil UTF8String]` returns `NULL`, and constructing a `std::string` from a `NULL` pointer results in undefined behavior, which typically leads to a crash.

To make this more robust, you can handle the `nil` case by providing a default empty string.

```suggestion
  std::string utf8String = rawString ? [rawString UTF8String] : """";
```",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177392, because - The status or check suite [Windows tool_integration_tests_2_9](https://cr-buildbucket.appspot.com/build/8700292693864765905) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"autosubmit label was removed for flutter/flutter/176959, because - The status or check suite [Linux tool_integration_tests_5_7](https://cr-buildbucket.appspot.com/build/8700359013307484545) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/176959, because - The status or check suite [Mac mac_unopt](https://cr-buildbucket.appspot.com/build/8700359012059700049) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

The `ClickableLink` interface is a functional interface and should be annotated with `@FunctionalInterface`.[^1] Additionally, the `public` access modifier on an interface method is redundant.[^2]

```suggestion
  @FunctionalInterface
  interface ClickableLink {
    void onClick();
  }
```

#### Style Guide References
[^1]: 
[^2]: ",
"![medium](https://www.gstatic.com/codereviewagent/medium-priority.svg)

This field is initialized in the constructor and not reassigned, so it can be made `final`.[^1]

```suggestion
    @NonNull private final ClickableLink link;
```

#### Style Guide References
[^1]: ",
"Can we rephrase this comment to say:
""In Android, a link is treated as a button if and only if it does not have a URL""",
"> [!NOTE]
> Gemini is unable to generate a review for this pull request due to the file types involved not being currently supported.",
"autosubmit label was removed for flutter/flutter/177390, because - The status or check suite [Linux flutter_plugins](https://cr-buildbucket.appspot.com/build/8700298976851486481) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177390, because - The status or check suite [Mac tool_integration_tests_5_5](https://cr-buildbucket.appspot.com/build/8700298976645412817) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Linux flutter_plugins](https://cr-buildbucket.appspot.com/build/8700298976851486481) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
"autosubmit label was removed for flutter/flutter/177390, because - The status or check suite [Mac tool_integration_tests_5_5](https://cr-buildbucket.appspot.com/build/8700298976645412817) has failed. Please fix the issues identified (or deflake) before re-applying this label.
- The status or check suite [Linux flutter_plugins](https://cr-buildbucket.appspot.com/build/8700298976851486481) has failed. Please fix the issues identified (or deflake) before re-applying this label.
",
Commit queue failed; closing this roll.,
"It looks like this pull request may not have tests. Please make sure to add tests or get an explicit test exemption before merging.

If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**

__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#how-to-review-code) and make sure this patch meets those guidelines before LGTMing. If you believe this PR qualifies for a test exemption, contact ""@test-exemption-reviewer"" in the #hackers channel in [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) (don't just cc them here, they won't see it!). The test exemption team is a small volunteer group, so _all_ reviewers should feel empowered to ask for tests, without delegating that responsibility entirely to the test exemption group.",
"![high](https://www.gstatic.com/codereviewagent/high-priority.svg)

This change introduces a few issues:

1.  **Resource Leak**: The `status.stop()` call is now only executed on failure. It should be executed regardless of the outcome to ensure the progress indicator is always stopped. The previous implementation correctly used a `try...finally` block for this.
2.  **Incomplete Error Handling**: On failure, the command should throw an exception to halt the build, similar to other `rsync` calls in the codebase. Simply stopping the status indicator is not enough.
3.  **Incorrect File Permissions**: The PR description states the expected permissions are `-rwxr-xr-x` (`755`), but the `--chmod` flag sets file permissions to `Fu=rw,Fgo=r`, which is `-rw-r--r--` (`644`). This makes files within the framework, including the main binary, non-executable.

The suggested change below addresses these points by reintroducing the `try...finally` block, throwing a `ToolExit` on error, and correcting the file permissions.

```dart
    try {
      // Copy xcframework engine cache framework to mode directory.
      final ProcessResult result = await globals.processManager.run(<String>[
        'rsync',
        '-av',
        '--delete',
        '--filter',
        '- .DS_Store/',
        '--chmod=Du=rwx,Dgo=rx,Fu=rwx,Fgo=rx',
        globals.fs.directory(engineCacheFlutterFrameworkDirectory).path,
        modeDirectory.path,
      ]);
      if (result.exitCode != 0) {
        throwToolExit('Failed to copy FlutterMacOS.xcframework: ${result.stderr}');
      }
    } finally {
      status.stop();
    }
```",
